// ---------------------------------------------------------------------------
// HStreamDB public APIs
// ---------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: hstream.proto

package server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpecialOffset int32

const (
	SpecialOffset_EARLIEST SpecialOffset = 0
	SpecialOffset_LATEST   SpecialOffset = 1
)

// Enum value maps for SpecialOffset.
var (
	SpecialOffset_name = map[int32]string{
		0: "EARLIEST",
		1: "LATEST",
	}
	SpecialOffset_value = map[string]int32{
		"EARLIEST": 0,
		"LATEST":   1,
	}
)

func (x SpecialOffset) Enum() *SpecialOffset {
	p := new(SpecialOffset)
	*p = x
	return p
}

func (x SpecialOffset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecialOffset) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[0].Descriptor()
}

func (SpecialOffset) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[0]
}

func (x SpecialOffset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecialOffset.Descriptor instead.
func (SpecialOffset) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{0}
}

type CompressionType int32

const (
	CompressionType_None CompressionType = 0
	CompressionType_Gzip CompressionType = 1
	CompressionType_Zstd CompressionType = 2
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "None",
		1: "Gzip",
		2: "Zstd",
	}
	CompressionType_value = map[string]int32{
		"None": 0,
		"Gzip": 1,
		"Zstd": 2,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[1].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[1]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{1}
}

type TaskStatusPB int32

const (
	TaskStatusPB_TASK_CREATING   TaskStatusPB = 0
	TaskStatusPB_TASK_RUNNING    TaskStatusPB = 1
	TaskStatusPB_TASK_ABORTED    TaskStatusPB = 2
	TaskStatusPB_TASK_PAUSED     TaskStatusPB = 3
	TaskStatusPB_TASK_RESUMING   TaskStatusPB = 4
	TaskStatusPB_TASK_TERMINATED TaskStatusPB = 5
	TaskStatusPB_TASK_UNKNOWN    TaskStatusPB = 6
)

// Enum value maps for TaskStatusPB.
var (
	TaskStatusPB_name = map[int32]string{
		0: "TASK_CREATING",
		1: "TASK_RUNNING",
		2: "TASK_ABORTED",
		3: "TASK_PAUSED",
		4: "TASK_RESUMING",
		5: "TASK_TERMINATED",
		6: "TASK_UNKNOWN",
	}
	TaskStatusPB_value = map[string]int32{
		"TASK_CREATING":   0,
		"TASK_RUNNING":    1,
		"TASK_ABORTED":    2,
		"TASK_PAUSED":     3,
		"TASK_RESUMING":   4,
		"TASK_TERMINATED": 5,
		"TASK_UNKNOWN":    6,
	}
)

func (x TaskStatusPB) Enum() *TaskStatusPB {
	p := new(TaskStatusPB)
	*p = x
	return p
}

func (x TaskStatusPB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatusPB) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[2].Descriptor()
}

func (TaskStatusPB) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[2]
}

func (x TaskStatusPB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatusPB.Descriptor instead.
func (TaskStatusPB) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{2}
}

type QueryType int32

const (
	QueryType_CreateStreamAs QueryType = 0
	QueryType_CreateViewAs   QueryType = 1
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "CreateStreamAs",
		1: "CreateViewAs",
	}
	QueryType_value = map[string]int32{
		"CreateStreamAs": 0,
		"CreateViewAs":   1,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[3].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[3]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{3}
}

type NodeState int32

const (
	NodeState_Starting    NodeState = 0
	NodeState_Running     NodeState = 1
	NodeState_Unavailable NodeState = 2
	NodeState_Dead        NodeState = 3
)

// Enum value maps for NodeState.
var (
	NodeState_name = map[int32]string{
		0: "Starting",
		1: "Running",
		2: "Unavailable",
		3: "Dead",
	}
	NodeState_value = map[string]int32{
		"Starting":    0,
		"Running":     1,
		"Unavailable": 2,
		"Dead":        3,
	}
)

func (x NodeState) Enum() *NodeState {
	p := new(NodeState)
	*p = x
	return p
}

func (x NodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[4].Descriptor()
}

func (NodeState) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[4]
}

func (x NodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeState.Descriptor instead.
func (NodeState) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{4}
}

type ResourceType int32

const (
	ResourceType_ResStream       ResourceType = 0
	ResourceType_ResSubscription ResourceType = 1
	ResourceType_ResShard        ResourceType = 2
	ResourceType_ResShardReader  ResourceType = 3
	ResourceType_ResConnector    ResourceType = 4
	ResourceType_ResQuery        ResourceType = 5
	ResourceType_ResView         ResourceType = 6
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "ResStream",
		1: "ResSubscription",
		2: "ResShard",
		3: "ResShardReader",
		4: "ResConnector",
		5: "ResQuery",
		6: "ResView",
	}
	ResourceType_value = map[string]int32{
		"ResStream":       0,
		"ResSubscription": 1,
		"ResShard":        2,
		"ResShardReader":  3,
		"ResConnector":    4,
		"ResQuery":        5,
		"ResView":         6,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[5].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[5]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{5}
}

type StreamStats int32

const (
	StreamStats_AppendInBytes   StreamStats = 0
	StreamStats_AppendInRecords StreamStats = 1
	StreamStats_AppendTotal     StreamStats = 2
	StreamStats_AppendFailed    StreamStats = 3
	StreamStats_ReadInBytes     StreamStats = 4
	StreamStats_ReadInBatches   StreamStats = 5
)

// Enum value maps for StreamStats.
var (
	StreamStats_name = map[int32]string{
		0: "AppendInBytes",
		1: "AppendInRecords",
		2: "AppendTotal",
		3: "AppendFailed",
		4: "ReadInBytes",
		5: "ReadInBatches",
	}
	StreamStats_value = map[string]int32{
		"AppendInBytes":   0,
		"AppendInRecords": 1,
		"AppendTotal":     2,
		"AppendFailed":    3,
		"ReadInBytes":     4,
		"ReadInBatches":   5,
	}
)

func (x StreamStats) Enum() *StreamStats {
	p := new(StreamStats)
	*p = x
	return p
}

func (x StreamStats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamStats) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[6].Descriptor()
}

func (StreamStats) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[6]
}

func (x StreamStats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamStats.Descriptor instead.
func (StreamStats) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{6}
}

type SubscriptionStats int32

const (
	SubscriptionStats_SendOutBytes         SubscriptionStats = 0
	SubscriptionStats_SendOutRecords       SubscriptionStats = 1
	SubscriptionStats_SendOutRecordsFailed SubscriptionStats = 2
	SubscriptionStats_ResendRecords        SubscriptionStats = 3
	SubscriptionStats_ResendRecordsFailed  SubscriptionStats = 4
	SubscriptionStats_ReceivedAcks         SubscriptionStats = 5
	SubscriptionStats_RequestMessages      SubscriptionStats = 6
	SubscriptionStats_ResponseMessages     SubscriptionStats = 7
	SubscriptionStats_ChecklistSize        SubscriptionStats = 8
)

// Enum value maps for SubscriptionStats.
var (
	SubscriptionStats_name = map[int32]string{
		0: "SendOutBytes",
		1: "SendOutRecords",
		2: "SendOutRecordsFailed",
		3: "ResendRecords",
		4: "ResendRecordsFailed",
		5: "ReceivedAcks",
		6: "RequestMessages",
		7: "ResponseMessages",
		8: "ChecklistSize",
	}
	SubscriptionStats_value = map[string]int32{
		"SendOutBytes":         0,
		"SendOutRecords":       1,
		"SendOutRecordsFailed": 2,
		"ResendRecords":        3,
		"ResendRecordsFailed":  4,
		"ReceivedAcks":         5,
		"RequestMessages":      6,
		"ResponseMessages":     7,
		"ChecklistSize":        8,
	}
)

func (x SubscriptionStats) Enum() *SubscriptionStats {
	p := new(SubscriptionStats)
	*p = x
	return p
}

func (x SubscriptionStats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionStats) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[7].Descriptor()
}

func (SubscriptionStats) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[7]
}

func (x SubscriptionStats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionStats.Descriptor instead.
func (SubscriptionStats) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{7}
}

type ConnectorStats int32

const (
	ConnectorStats_DeliveredInRecords ConnectorStats = 0
	ConnectorStats_DeliveredInBytes   ConnectorStats = 1
)

// Enum value maps for ConnectorStats.
var (
	ConnectorStats_name = map[int32]string{
		0: "DeliveredInRecords",
		1: "DeliveredInBytes",
	}
	ConnectorStats_value = map[string]int32{
		"DeliveredInRecords": 0,
		"DeliveredInBytes":   1,
	}
)

func (x ConnectorStats) Enum() *ConnectorStats {
	p := new(ConnectorStats)
	*p = x
	return p
}

func (x ConnectorStats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectorStats) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[8].Descriptor()
}

func (ConnectorStats) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[8]
}

func (x ConnectorStats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectorStats.Descriptor instead.
func (ConnectorStats) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{8}
}

type QueryStats int32

const (
	QueryStats_TotalInputRecords  QueryStats = 0
	QueryStats_TotalOutputRecords QueryStats = 1
	QueryStats_TotalExecuteErrors QueryStats = 2
)

// Enum value maps for QueryStats.
var (
	QueryStats_name = map[int32]string{
		0: "TotalInputRecords",
		1: "TotalOutputRecords",
		2: "TotalExecuteErrors",
	}
	QueryStats_value = map[string]int32{
		"TotalInputRecords":  0,
		"TotalOutputRecords": 1,
		"TotalExecuteErrors": 2,
	}
)

func (x QueryStats) Enum() *QueryStats {
	p := new(QueryStats)
	*p = x
	return p
}

func (x QueryStats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryStats) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[9].Descriptor()
}

func (QueryStats) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[9]
}

func (x QueryStats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryStats.Descriptor instead.
func (QueryStats) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{9}
}

type ViewStats int32

const (
	ViewStats_TotalExecuteQueries ViewStats = 0
)

// Enum value maps for ViewStats.
var (
	ViewStats_name = map[int32]string{
		0: "TotalExecuteQueries",
	}
	ViewStats_value = map[string]int32{
		"TotalExecuteQueries": 0,
	}
)

func (x ViewStats) Enum() *ViewStats {
	p := new(ViewStats)
	*p = x
	return p
}

func (x ViewStats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewStats) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[10].Descriptor()
}

func (ViewStats) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[10]
}

func (x ViewStats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewStats.Descriptor instead.
func (ViewStats) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{10}
}

// ErrorCodes
type ErrorCode int32

const (
	// 0xx -> internal error
	ErrorCode_InternalError ErrorCode = 0
	// 2xx -> Stream Errors
	ErrorCode_StreamNotFound                ErrorCode = 200
	ErrorCode_StreamExists                  ErrorCode = 201
	ErrorCode_StreamFoundSubscription       ErrorCode = 202
	ErrorCode_StreamInvalidReplicaFactor    ErrorCode = 203
	ErrorCode_StreamInvalidObjectIdentifier ErrorCode = 204
	ErrorCode_StreamInvalidShardCount       ErrorCode = 205
	ErrorCode_StreamEmptyBatchedRecord      ErrorCode = 206
	ErrorCode_StreamInvalidRecordSize       ErrorCode = 207
	ErrorCode_StreamInvalidOffset           ErrorCode = 208
	ErrorCode_StreamInvalidRecordId         ErrorCode = 209
	ErrorCode_StreamShardNotExists          ErrorCode = 210
	// 3xx -> Subscription Errors
	ErrorCode_SubscriptionNotFound                    ErrorCode = 300
	ErrorCode_SubscriptionExists                      ErrorCode = 301
	ErrorCode_SubscriptionCreationOnNonExistentStream ErrorCode = 302
	ErrorCode_SubscriptionInvalidOffset               ErrorCode = 303
	ErrorCode_SubscriptionInvalidObjectIdentifier     ErrorCode = 304
	ErrorCode_SubscriptionFoundActiveConsumers        ErrorCode = 305
	// 4xx -> Query Errors
	ErrorCode_QueryNotFound                ErrorCode = 400
	ErrorCode_QueryExists                  ErrorCode = 401
	ErrorCode_QueryInvalidSQL              ErrorCode = 402
	ErrorCode_QueryFoundAssociatedView     ErrorCode = 403
	ErrorCode_QueryInvalidObjectIdentifier ErrorCode = 404
	ErrorCode_QueryStillRunning            ErrorCode = 405
	ErrorCode_QueryNotRunning              ErrorCode = 406
	ErrorCode_QueryNotTerminated           ErrorCode = 407
	ErrorCode_QueryAlreadyTerminated       ErrorCode = 408
	// 5xx -> View Errors
	ErrorCode_ViewNotFound                ErrorCode = 500
	ErrorCode_ViewExists                  ErrorCode = 501
	ErrorCode_ViewInvalidSQL              ErrorCode = 502
	ErrorCode_ViewInvalidObjectIdentifier ErrorCode = 503
	// 6xx -> IO
	ErrorCode_ConnectorNotFound                ErrorCode = 600
	ErrorCode_ConnectorExists                  ErrorCode = 601
	ErrorCode_ConnectorInvalidType             ErrorCode = 602
	ErrorCode_ConnectorInvalidObjectIdentifier ErrorCode = 603
	ErrorCode_ConnectorCheckFailed             ErrorCode = 604
	ErrorCode_ConnectorUnimplemented           ErrorCode = 605
	ErrorCode_ConnectorInvalidStatus           ErrorCode = 606
	// 8xx -> Cluster
	ErrorCode_WrongServer ErrorCode = 800
	// 9xx -> ShardReader
	ErrorCode_ShardReaderInvalidObjectIdentifier ErrorCode = 900
	ErrorCode_ShardReaderConflictOffset          ErrorCode = 901
	ErrorCode_ShardReaderTooManyShards           ErrorCode = 902
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:   "InternalError",
		200: "StreamNotFound",
		201: "StreamExists",
		202: "StreamFoundSubscription",
		203: "StreamInvalidReplicaFactor",
		204: "StreamInvalidObjectIdentifier",
		205: "StreamInvalidShardCount",
		206: "StreamEmptyBatchedRecord",
		207: "StreamInvalidRecordSize",
		208: "StreamInvalidOffset",
		209: "StreamInvalidRecordId",
		210: "StreamShardNotExists",
		300: "SubscriptionNotFound",
		301: "SubscriptionExists",
		302: "SubscriptionCreationOnNonExistentStream",
		303: "SubscriptionInvalidOffset",
		304: "SubscriptionInvalidObjectIdentifier",
		305: "SubscriptionFoundActiveConsumers",
		400: "QueryNotFound",
		401: "QueryExists",
		402: "QueryInvalidSQL",
		403: "QueryFoundAssociatedView",
		404: "QueryInvalidObjectIdentifier",
		405: "QueryStillRunning",
		406: "QueryNotRunning",
		407: "QueryNotTerminated",
		408: "QueryAlreadyTerminated",
		500: "ViewNotFound",
		501: "ViewExists",
		502: "ViewInvalidSQL",
		503: "ViewInvalidObjectIdentifier",
		600: "ConnectorNotFound",
		601: "ConnectorExists",
		602: "ConnectorInvalidType",
		603: "ConnectorInvalidObjectIdentifier",
		604: "ConnectorCheckFailed",
		605: "ConnectorUnimplemented",
		606: "ConnectorInvalidStatus",
		800: "WrongServer",
		900: "ShardReaderInvalidObjectIdentifier",
		901: "ShardReaderConflictOffset",
		902: "ShardReaderTooManyShards",
	}
	ErrorCode_value = map[string]int32{
		"InternalError":                           0,
		"StreamNotFound":                          200,
		"StreamExists":                            201,
		"StreamFoundSubscription":                 202,
		"StreamInvalidReplicaFactor":              203,
		"StreamInvalidObjectIdentifier":           204,
		"StreamInvalidShardCount":                 205,
		"StreamEmptyBatchedRecord":                206,
		"StreamInvalidRecordSize":                 207,
		"StreamInvalidOffset":                     208,
		"StreamInvalidRecordId":                   209,
		"StreamShardNotExists":                    210,
		"SubscriptionNotFound":                    300,
		"SubscriptionExists":                      301,
		"SubscriptionCreationOnNonExistentStream": 302,
		"SubscriptionInvalidOffset":               303,
		"SubscriptionInvalidObjectIdentifier":     304,
		"SubscriptionFoundActiveConsumers":        305,
		"QueryNotFound":                           400,
		"QueryExists":                             401,
		"QueryInvalidSQL":                         402,
		"QueryFoundAssociatedView":                403,
		"QueryInvalidObjectIdentifier":            404,
		"QueryStillRunning":                       405,
		"QueryNotRunning":                         406,
		"QueryNotTerminated":                      407,
		"QueryAlreadyTerminated":                  408,
		"ViewNotFound":                            500,
		"ViewExists":                              501,
		"ViewInvalidSQL":                          502,
		"ViewInvalidObjectIdentifier":             503,
		"ConnectorNotFound":                       600,
		"ConnectorExists":                         601,
		"ConnectorInvalidType":                    602,
		"ConnectorInvalidObjectIdentifier":        603,
		"ConnectorCheckFailed":                    604,
		"ConnectorUnimplemented":                  605,
		"ConnectorInvalidStatus":                  606,
		"WrongServer":                             800,
		"ShardReaderInvalidObjectIdentifier":      900,
		"ShardReaderConflictOffset":               901,
		"ShardReaderTooManyShards":                902,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[11].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[11]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{11}
}

// Required.
// Flag for payload.
type HStreamRecordHeader_Flag int32

const (
	HStreamRecordHeader_JSON HStreamRecordHeader_Flag = 0
	HStreamRecordHeader_RAW  HStreamRecordHeader_Flag = 1
)

// Enum value maps for HStreamRecordHeader_Flag.
var (
	HStreamRecordHeader_Flag_name = map[int32]string{
		0: "JSON",
		1: "RAW",
	}
	HStreamRecordHeader_Flag_value = map[string]int32{
		"JSON": 0,
		"RAW":  1,
	}
)

func (x HStreamRecordHeader_Flag) Enum() *HStreamRecordHeader_Flag {
	p := new(HStreamRecordHeader_Flag)
	*p = x
	return p
}

func (x HStreamRecordHeader_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HStreamRecordHeader_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hstream_proto_enumTypes[12].Descriptor()
}

func (HStreamRecordHeader_Flag) Type() protoreflect.EnumType {
	return &file_hstream_proto_enumTypes[12]
}

func (x HStreamRecordHeader_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HStreamRecordHeader_Flag.Descriptor instead.
func (HStreamRecordHeader_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{40, 0}
}

type TimestampOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampInMs  int64 `protobuf:"varint,1,opt,name=timestampInMs,proto3" json:"timestampInMs,omitempty"`
	StrictAccuracy bool  `protobuf:"varint,2,opt,name=strictAccuracy,proto3" json:"strictAccuracy,omitempty"`
}

func (x *TimestampOffset) Reset() {
	*x = TimestampOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampOffset) ProtoMessage() {}

func (x *TimestampOffset) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampOffset.ProtoReflect.Descriptor instead.
func (*TimestampOffset) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{0}
}

func (x *TimestampOffset) GetTimestampInMs() int64 {
	if x != nil {
		return x.TimestampInMs
	}
	return 0
}

func (x *TimestampOffset) GetStrictAccuracy() bool {
	if x != nil {
		return x.StrictAccuracy
	}
	return false
}

type ShardOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Offset:
	//
	//	*ShardOffset_SpecialOffset
	//	*ShardOffset_RecordOffset
	//	*ShardOffset_TimestampOffset
	Offset isShardOffset_Offset `protobuf_oneof:"offset"`
}

func (x *ShardOffset) Reset() {
	*x = ShardOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardOffset) ProtoMessage() {}

func (x *ShardOffset) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardOffset.ProtoReflect.Descriptor instead.
func (*ShardOffset) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{1}
}

func (m *ShardOffset) GetOffset() isShardOffset_Offset {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (x *ShardOffset) GetSpecialOffset() SpecialOffset {
	if x, ok := x.GetOffset().(*ShardOffset_SpecialOffset); ok {
		return x.SpecialOffset
	}
	return SpecialOffset_EARLIEST
}

func (x *ShardOffset) GetRecordOffset() *RecordId {
	if x, ok := x.GetOffset().(*ShardOffset_RecordOffset); ok {
		return x.RecordOffset
	}
	return nil
}

func (x *ShardOffset) GetTimestampOffset() *TimestampOffset {
	if x, ok := x.GetOffset().(*ShardOffset_TimestampOffset); ok {
		return x.TimestampOffset
	}
	return nil
}

type isShardOffset_Offset interface {
	isShardOffset_Offset()
}

type ShardOffset_SpecialOffset struct {
	SpecialOffset SpecialOffset `protobuf:"varint,1,opt,name=specialOffset,proto3,enum=hstream.server.SpecialOffset,oneof"`
}

type ShardOffset_RecordOffset struct {
	RecordOffset *RecordId `protobuf:"bytes,2,opt,name=recordOffset,proto3,oneof"`
}

type ShardOffset_TimestampOffset struct {
	TimestampOffset *TimestampOffset `protobuf:"bytes,3,opt,name=timestampOffset,proto3,oneof"`
}

func (*ShardOffset_SpecialOffset) isShardOffset_Offset() {}

func (*ShardOffset_RecordOffset) isShardOffset_Offset() {}

func (*ShardOffset_TimestampOffset) isShardOffset_Offset() {}

type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{2}
}

func (x *EchoRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type EchoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *EchoResponse) Reset() {
	*x = EchoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponse) ProtoMessage() {}

func (x *EchoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResponse.ProtoReflect.Descriptor instead.
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{3}
}

func (x *EchoResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CommandStreamTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandSql string `protobuf:"bytes,1,opt,name=command_sql,json=commandSql,proto3" json:"command_sql,omitempty"`
}

func (x *CommandStreamTask) Reset() {
	*x = CommandStreamTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandStreamTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandStreamTask) ProtoMessage() {}

func (x *CommandStreamTask) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandStreamTask.ProtoReflect.Descriptor instead.
func (*CommandStreamTask) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{4}
}

func (x *CommandStreamTask) GetCommandSql() string {
	if x != nil {
		return x.CommandSql
	}
	return ""
}

type CommandStreamTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandResp string `protobuf:"bytes,1,opt,name=command_resp,json=commandResp,proto3" json:"command_resp,omitempty"`
}

func (x *CommandStreamTaskResponse) Reset() {
	*x = CommandStreamTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandStreamTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandStreamTaskResponse) ProtoMessage() {}

func (x *CommandStreamTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandStreamTaskResponse.ProtoReflect.Descriptor instead.
func (*CommandStreamTaskResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{5}
}

func (x *CommandStreamTaskResponse) GetCommandResp() string {
	if x != nil {
		return x.CommandResp
	}
	return ""
}

type CommandConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion   string `protobuf:"bytes,1,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ProtocolVersion int32  `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *CommandConnect) Reset() {
	*x = CommandConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandConnect) ProtoMessage() {}

func (x *CommandConnect) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandConnect.ProtoReflect.Descriptor instead.
func (*CommandConnect) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{6}
}

func (x *CommandConnect) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *CommandConnect) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

type CommandConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion   string `protobuf:"bytes,1,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
	ProtocolVersion int32  `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *CommandConnected) Reset() {
	*x = CommandConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandConnected) ProtoMessage() {}

func (x *CommandConnected) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandConnected.ProtoReflect.Descriptor instead.
func (*CommandConnected) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{7}
}

func (x *CommandConnected) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *CommandConnected) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

type CommandQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StmtText string `protobuf:"bytes,1,opt,name=stmt_text,json=stmtText,proto3" json:"stmt_text,omitempty"`
}

func (x *CommandQuery) Reset() {
	*x = CommandQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandQuery) ProtoMessage() {}

func (x *CommandQuery) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandQuery.ProtoReflect.Descriptor instead.
func (*CommandQuery) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{8}
}

func (x *CommandQuery) GetStmtText() string {
	if x != nil {
		return x.StmtText
	}
	return ""
}

type CommandQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultSet []*structpb.Struct `protobuf:"bytes,1,rep,name=result_set,json=resultSet,proto3" json:"result_set,omitempty"`
}

func (x *CommandQueryResponse) Reset() {
	*x = CommandQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandQueryResponse) ProtoMessage() {}

func (x *CommandQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandQueryResponse.ProtoReflect.Descriptor instead.
func (*CommandQueryResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{9}
}

func (x *CommandQueryResponse) GetResultSet() []*structpb.Struct {
	if x != nil {
		return x.ResultSet
	}
	return nil
}

type GetStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetStreamRequest) Reset() {
	*x = GetStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamRequest) ProtoMessage() {}

func (x *GetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamRequest.ProtoReflect.Descriptor instead.
func (*GetStreamRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{10}
}

func (x *GetStreamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *GetStreamResponse) Reset() {
	*x = GetStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamResponse) ProtoMessage() {}

func (x *GetStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamResponse.ProtoReflect.Descriptor instead.
func (*GetStreamResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{11}
}

func (x *GetStreamResponse) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type AppendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName string         `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	ShardId    uint64         `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	Records    *BatchedRecord `protobuf:"bytes,3,opt,name=records,proto3" json:"records,omitempty"`
}

func (x *AppendRequest) Reset() {
	*x = AppendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRequest) ProtoMessage() {}

func (x *AppendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRequest.ProtoReflect.Descriptor instead.
func (*AppendRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{12}
}

func (x *AppendRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *AppendRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *AppendRequest) GetRecords() *BatchedRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type AppendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName string      `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	ShardId    uint64      `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	RecordIds  []*RecordId `protobuf:"bytes,3,rep,name=recordIds,proto3" json:"recordIds,omitempty"`
}

func (x *AppendResponse) Reset() {
	*x = AppendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendResponse) ProtoMessage() {}

func (x *AppendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendResponse.ProtoReflect.Descriptor instead.
func (*AppendResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{13}
}

func (x *AppendResponse) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *AppendResponse) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *AppendResponse) GetRecordIds() []*RecordId {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId    string                 `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	StreamName        string                 `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	AckTimeoutSeconds int32                  `protobuf:"varint,3,opt,name=ackTimeoutSeconds,proto3" json:"ackTimeoutSeconds,omitempty"`
	MaxUnackedRecords int32                  `protobuf:"varint,4,opt,name=maxUnackedRecords,proto3" json:"maxUnackedRecords,omitempty"`
	Offset            SpecialOffset          `protobuf:"varint,5,opt,name=offset,proto3,enum=hstream.server.SpecialOffset" json:"offset,omitempty"`
	CreationTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{14}
}

func (x *Subscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *Subscription) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *Subscription) GetAckTimeoutSeconds() int32 {
	if x != nil {
		return x.AckTimeoutSeconds
	}
	return 0
}

func (x *Subscription) GetMaxUnackedRecords() int32 {
	if x != nil {
		return x.MaxUnackedRecords
	}
	return 0
}

func (x *Subscription) GetOffset() SpecialOffset {
	if x != nil {
		return x.Offset
	}
	return SpecialOffset_EARLIEST
}

func (x *Subscription) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

type SubscriptionOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId uint64 `protobuf:"varint,1,opt,name=shardId,proto3" json:"shardId,omitempty"`
	BatchId uint64 `protobuf:"varint,2,opt,name=batchId,proto3" json:"batchId,omitempty"`
}

func (x *SubscriptionOffset) Reset() {
	*x = SubscriptionOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionOffset) ProtoMessage() {}

func (x *SubscriptionOffset) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionOffset.ProtoReflect.Descriptor instead.
func (*SubscriptionOffset) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{15}
}

func (x *SubscriptionOffset) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *SubscriptionOffset) GetBatchId() uint64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

type GetSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubscriptionRequest) Reset() {
	*x = GetSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionRequest) ProtoMessage() {}

func (x *GetSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{16}
}

func (x *GetSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *Subscription         `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	Offsets      []*SubscriptionOffset `protobuf:"bytes,2,rep,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *GetSubscriptionResponse) Reset() {
	*x = GetSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionResponse) ProtoMessage() {}

func (x *GetSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{17}
}

func (x *GetSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *GetSubscriptionResponse) GetOffsets() []*SubscriptionOffset {
	if x != nil {
		return x.Offsets
	}
	return nil
}

type DeleteSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	Force          bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteSubscriptionRequest) Reset() {
	*x = DeleteSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionRequest) ProtoMessage() {}

func (x *DeleteSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteSubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *DeleteSubscriptionRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type CheckSubscriptionExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
}

func (x *CheckSubscriptionExistRequest) Reset() {
	*x = CheckSubscriptionExistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSubscriptionExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSubscriptionExistRequest) ProtoMessage() {}

func (x *CheckSubscriptionExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSubscriptionExistRequest.ProtoReflect.Descriptor instead.
func (*CheckSubscriptionExistRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{19}
}

func (x *CheckSubscriptionExistRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type CheckSubscriptionExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *CheckSubscriptionExistResponse) Reset() {
	*x = CheckSubscriptionExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSubscriptionExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSubscriptionExistResponse) ProtoMessage() {}

func (x *CheckSubscriptionExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSubscriptionExistResponse.ProtoReflect.Descriptor instead.
func (*CheckSubscriptionExistResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{20}
}

func (x *CheckSubscriptionExistResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type StreamingFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string      `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	ConsumerName   string      `protobuf:"bytes,2,opt,name=consumerName,proto3" json:"consumerName,omitempty"`
	AckIds         []*RecordId `protobuf:"bytes,3,rep,name=ackIds,proto3" json:"ackIds,omitempty"`
}

func (x *StreamingFetchRequest) Reset() {
	*x = StreamingFetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingFetchRequest) ProtoMessage() {}

func (x *StreamingFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingFetchRequest.ProtoReflect.Descriptor instead.
func (*StreamingFetchRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{21}
}

func (x *StreamingFetchRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *StreamingFetchRequest) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

func (x *StreamingFetchRequest) GetAckIds() []*RecordId {
	if x != nil {
		return x.AckIds
	}
	return nil
}

type StreamingFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedRecords *ReceivedRecord `protobuf:"bytes,1,opt,name=receivedRecords,proto3" json:"receivedRecords,omitempty"`
}

func (x *StreamingFetchResponse) Reset() {
	*x = StreamingFetchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingFetchResponse) ProtoMessage() {}

func (x *StreamingFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingFetchResponse.ProtoReflect.Descriptor instead.
func (*StreamingFetchResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{22}
}

func (x *StreamingFetchResponse) GetReceivedRecords() *ReceivedRecord {
	if x != nil {
		return x.ReceivedRecords
	}
	return nil
}

type ReceivedRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordIds []*RecordId    `protobuf:"bytes,1,rep,name=recordIds,proto3" json:"recordIds,omitempty"`
	Record    *BatchedRecord `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *ReceivedRecord) Reset() {
	*x = ReceivedRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedRecord) ProtoMessage() {}

func (x *ReceivedRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedRecord.ProtoReflect.Descriptor instead.
func (*ReceivedRecord) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{23}
}

func (x *ReceivedRecord) GetRecordIds() []*RecordId {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

func (x *ReceivedRecord) GetRecord() *BatchedRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type DeleteStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName     string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	IgnoreNonExist bool   `protobuf:"varint,2,opt,name=ignoreNonExist,proto3" json:"ignoreNonExist,omitempty"`
	Force          bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteStreamRequest) Reset() {
	*x = DeleteStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStreamRequest) ProtoMessage() {}

func (x *DeleteStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStreamRequest.ProtoReflect.Descriptor instead.
func (*DeleteStreamRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteStreamRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *DeleteStreamRequest) GetIgnoreNonExist() bool {
	if x != nil {
		return x.IgnoreNonExist
	}
	return false
}

func (x *DeleteStreamRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ListStreamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams []*Stream `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (x *ListStreamsResponse) Reset() {
	*x = ListStreamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamsResponse) ProtoMessage() {}

func (x *ListStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamsResponse.ProtoReflect.Descriptor instead.
func (*ListStreamsResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{25}
}

func (x *ListStreamsResponse) GetStreams() []*Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

// TODO: Add options for filtering or max_size
type ListStreamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStreamsRequest) Reset() {
	*x = ListStreamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamsRequest) ProtoMessage() {}

func (x *ListStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamsRequest.ProtoReflect.Descriptor instead.
func (*ListStreamsRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{26}
}

type ListStreamsWithPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *ListStreamsWithPrefixRequest) Reset() {
	*x = ListStreamsWithPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamsWithPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamsWithPrefixRequest) ProtoMessage() {}

func (x *ListStreamsWithPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamsWithPrefixRequest.ProtoReflect.Descriptor instead.
func (*ListStreamsWithPrefixRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{27}
}

func (x *ListStreamsWithPrefixRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type ListSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSubscriptionsRequest) Reset() {
	*x = ListSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubscriptionsRequest) ProtoMessage() {}

func (x *ListSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*ListSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{28}
}

type ListSubscriptionsWithPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *ListSubscriptionsWithPrefixRequest) Reset() {
	*x = ListSubscriptionsWithPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubscriptionsWithPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubscriptionsWithPrefixRequest) ProtoMessage() {}

func (x *ListSubscriptionsWithPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubscriptionsWithPrefixRequest.ProtoReflect.Descriptor instead.
func (*ListSubscriptionsWithPrefixRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{29}
}

func (x *ListSubscriptionsWithPrefixRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type ListSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription []*Subscription `protobuf:"bytes,1,rep,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *ListSubscriptionsResponse) Reset() {
	*x = ListSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubscriptionsResponse) ProtoMessage() {}

func (x *ListSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*ListSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{30}
}

func (x *ListSubscriptionsResponse) GetSubscription() []*Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type ListConsumersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
}

func (x *ListConsumersRequest) Reset() {
	*x = ListConsumersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsumersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsumersRequest) ProtoMessage() {}

func (x *ListConsumersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsumersRequest.ProtoReflect.Descriptor instead.
func (*ListConsumersRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{31}
}

func (x *ListConsumersRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type ListConsumersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumers []*Consumer `protobuf:"bytes,1,rep,name=consumers,proto3" json:"consumers,omitempty"`
}

func (x *ListConsumersResponse) Reset() {
	*x = ListConsumersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsumersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsumersResponse) ProtoMessage() {}

func (x *ListConsumersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsumersResponse.ProtoReflect.Descriptor instead.
func (*ListConsumersResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{32}
}

func (x *ListConsumersResponse) GetConsumers() []*Consumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

type TrimStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	// trim up to and including this offset
	TrimPoint *StreamOffset `protobuf:"bytes,2,opt,name=trimPoint,proto3" json:"trimPoint,omitempty"`
}

func (x *TrimStreamRequest) Reset() {
	*x = TrimStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrimStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimStreamRequest) ProtoMessage() {}

func (x *TrimStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimStreamRequest.ProtoReflect.Descriptor instead.
func (*TrimStreamRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{33}
}

func (x *TrimStreamRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *TrimStreamRequest) GetTrimPoint() *StreamOffset {
	if x != nil {
		return x.TrimPoint
	}
	return nil
}

type TrimShardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	// recordId: "shardId-batchId-batchIndex"
	RecordIds []string `protobuf:"bytes,2,rep,name=recordIds,proto3" json:"recordIds,omitempty"`
}

func (x *TrimShardsRequest) Reset() {
	*x = TrimShardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrimShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimShardsRequest) ProtoMessage() {}

func (x *TrimShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimShardsRequest.ProtoReflect.Descriptor instead.
func (*TrimShardsRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{34}
}

func (x *TrimShardsRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *TrimShardsRequest) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

type TrimShardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// return map{shardId -> RecordId}, records before recordId(exclude) for each
	// shard are all trimmed
	TrimPoints map[uint64]string `protobuf:"bytes,1,rep,name=trimPoints,proto3" json:"trimPoints,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrimShardsResponse) Reset() {
	*x = TrimShardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrimShardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimShardsResponse) ProtoMessage() {}

func (x *TrimShardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimShardsResponse.ProtoReflect.Descriptor instead.
func (*TrimShardsResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{35}
}

func (x *TrimShardsResponse) GetTrimPoints() map[uint64]string {
	if x != nil {
		return x.TrimPoints
	}
	return nil
}

type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName        string                 `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	ReplicationFactor uint32                 `protobuf:"varint,2,opt,name=replicationFactor,proto3" json:"replicationFactor,omitempty"`
	BacklogDuration   uint32                 `protobuf:"varint,3,opt,name=backlogDuration,proto3" json:"backlogDuration,omitempty"`
	ShardCount        uint32                 `protobuf:"varint,4,opt,name=shardCount,proto3" json:"shardCount,omitempty"`
	CreationTime      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{36}
}

func (x *Stream) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *Stream) GetReplicationFactor() uint32 {
	if x != nil {
		return x.ReplicationFactor
	}
	return 0
}

func (x *Stream) GetBacklogDuration() uint32 {
	if x != nil {
		return x.BacklogDuration
	}
	return 0
}

func (x *Stream) GetShardCount() uint32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *Stream) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

type BatchedRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompressionType CompressionType `protobuf:"varint,1,opt,name=compressionType,proto3,enum=hstream.server.CompressionType" json:"compressionType,omitempty"`
	// Required.
	// The time at which the message was published,
	// populated by the server.
	PublishTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=publishTime,proto3" json:"publishTime,omitempty"`
	// Required
	// batchSize records the number of compressed HStreamRecords
	// in the current batch. This field allows the server to build
	// the RecordId correctly without decompression after reading
	// the data from the store.
	BatchSize uint32 `protobuf:"varint,3,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	Payload   []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"` // serialized BatchHStreamRecords
}

func (x *BatchedRecord) Reset() {
	*x = BatchedRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchedRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchedRecord) ProtoMessage() {}

func (x *BatchedRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchedRecord.ProtoReflect.Descriptor instead.
func (*BatchedRecord) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{37}
}

func (x *BatchedRecord) GetCompressionType() CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return CompressionType_None
}

func (x *BatchedRecord) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *BatchedRecord) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *BatchedRecord) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type HStreamRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	Header *HStreamRecordHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Optional.
	// Payload may be empty.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *HStreamRecord) Reset() {
	*x = HStreamRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HStreamRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HStreamRecord) ProtoMessage() {}

func (x *HStreamRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HStreamRecord.ProtoReflect.Descriptor instead.
func (*HStreamRecord) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{38}
}

func (x *HStreamRecord) GetHeader() *HStreamRecordHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HStreamRecord) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Auxiliary types for serialization [HStreamRecord]
type BatchHStreamRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*HStreamRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *BatchHStreamRecords) Reset() {
	*x = BatchHStreamRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchHStreamRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchHStreamRecords) ProtoMessage() {}

func (x *BatchHStreamRecords) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchHStreamRecords.ProtoReflect.Descriptor instead.
func (*BatchHStreamRecords) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{39}
}

func (x *BatchHStreamRecords) GetRecords() []*HStreamRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type HStreamRecordHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag HStreamRecordHeader_Flag `protobuf:"varint,1,opt,name=flag,proto3,enum=hstream.server.HStreamRecordHeader_Flag" json:"flag,omitempty"`
	// Optional.
	// Attributes attached to this record.
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional.
	// key for the message.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HStreamRecordHeader) Reset() {
	*x = HStreamRecordHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HStreamRecordHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HStreamRecordHeader) ProtoMessage() {}

func (x *HStreamRecordHeader) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HStreamRecordHeader.ProtoReflect.Descriptor instead.
func (*HStreamRecordHeader) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{40}
}

func (x *HStreamRecordHeader) GetFlag() HStreamRecordHeader_Flag {
	if x != nil {
		return x.Flag
	}
	return HStreamRecordHeader_JSON
}

func (x *HStreamRecordHeader) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *HStreamRecordHeader) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RecordId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId uint64 `protobuf:"varint,1,opt,name=shardId,proto3" json:"shardId,omitempty"`
	// LSN of the total batch records
	BatchId uint64 `protobuf:"varint,2,opt,name=batchId,proto3" json:"batchId,omitempty"`
	// Offset of each record in the batch
	BatchIndex uint32 `protobuf:"varint,3,opt,name=batchIndex,proto3" json:"batchIndex,omitempty"`
}

func (x *RecordId) Reset() {
	*x = RecordId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordId) ProtoMessage() {}

func (x *RecordId) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordId.ProtoReflect.Descriptor instead.
func (*RecordId) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{41}
}

func (x *RecordId) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *RecordId) GetBatchId() uint64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *RecordId) GetBatchIndex() uint32 {
	if x != nil {
		return x.BatchIndex
	}
	return 0
}

type Shard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName        string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	ShardId           uint64 `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	StartHashRangeKey string `protobuf:"bytes,3,opt,name=startHashRangeKey,proto3" json:"startHashRangeKey,omitempty"`
	EndHashRangeKey   string `protobuf:"bytes,4,opt,name=endHashRangeKey,proto3" json:"endHashRangeKey,omitempty"`
	Epoch             uint64 `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	IsActive          bool   `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *Shard) Reset() {
	*x = Shard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{42}
}

func (x *Shard) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *Shard) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *Shard) GetStartHashRangeKey() string {
	if x != nil {
		return x.StartHashRangeKey
	}
	return ""
}

func (x *Shard) GetEndHashRangeKey() string {
	if x != nil {
		return x.EndHashRangeKey
	}
	return ""
}

func (x *Shard) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Shard) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type ListShardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
}

func (x *ListShardsRequest) Reset() {
	*x = ListShardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShardsRequest) ProtoMessage() {}

func (x *ListShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShardsRequest.ProtoReflect.Descriptor instead.
func (*ListShardsRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{43}
}

func (x *ListShardsRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

type ListShardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shards []*Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
}

func (x *ListShardsResponse) Reset() {
	*x = ListShardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShardsResponse) ProtoMessage() {}

func (x *ListShardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShardsResponse.ProtoReflect.Descriptor instead.
func (*ListShardsResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{44}
}

func (x *ListShardsResponse) GetShards() []*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

type TrimShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	ShardId    uint64 `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	// trim up to and including this offset
	TrimPoint *ShardOffset `protobuf:"bytes,3,opt,name=trimPoint,proto3" json:"trimPoint,omitempty"`
}

func (x *TrimShardRequest) Reset() {
	*x = TrimShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrimShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimShardRequest) ProtoMessage() {}

func (x *TrimShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimShardRequest.ProtoReflect.Descriptor instead.
func (*TrimShardRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{45}
}

func (x *TrimShardRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *TrimShardRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *TrimShardRequest) GetTrimPoint() *ShardOffset {
	if x != nil {
		return x.TrimPoint
	}
	return nil
}

type CreateShardReaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName  string       `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	ShardId     uint64       `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	ShardOffset *ShardOffset `protobuf:"bytes,3,opt,name=shardOffset,proto3" json:"shardOffset,omitempty"`
	ReaderId    string       `protobuf:"bytes,4,opt,name=readerId,proto3" json:"readerId,omitempty"`
	Timeout     uint32       `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *CreateShardReaderRequest) Reset() {
	*x = CreateShardReaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShardReaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShardReaderRequest) ProtoMessage() {}

func (x *CreateShardReaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShardReaderRequest.ProtoReflect.Descriptor instead.
func (*CreateShardReaderRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{46}
}

func (x *CreateShardReaderRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *CreateShardReaderRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *CreateShardReaderRequest) GetShardOffset() *ShardOffset {
	if x != nil {
		return x.ShardOffset
	}
	return nil
}

func (x *CreateShardReaderRequest) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

func (x *CreateShardReaderRequest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type CreateShardReaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName  string       `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	ShardId     uint64       `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	ShardOffset *ShardOffset `protobuf:"bytes,3,opt,name=shardOffset,proto3" json:"shardOffset,omitempty"`
	ReaderId    string       `protobuf:"bytes,4,opt,name=readerId,proto3" json:"readerId,omitempty"`
	Timeout     uint32       `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *CreateShardReaderResponse) Reset() {
	*x = CreateShardReaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShardReaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShardReaderResponse) ProtoMessage() {}

func (x *CreateShardReaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShardReaderResponse.ProtoReflect.Descriptor instead.
func (*CreateShardReaderResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{47}
}

func (x *CreateShardReaderResponse) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *CreateShardReaderResponse) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *CreateShardReaderResponse) GetShardOffset() *ShardOffset {
	if x != nil {
		return x.ShardOffset
	}
	return nil
}

func (x *CreateShardReaderResponse) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

func (x *CreateShardReaderResponse) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type ReadShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReaderId   string `protobuf:"bytes,1,opt,name=readerId,proto3" json:"readerId,omitempty"`
	MaxRecords uint32 `protobuf:"varint,2,opt,name=maxRecords,proto3" json:"maxRecords,omitempty"`
}

func (x *ReadShardRequest) Reset() {
	*x = ReadShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadShardRequest) ProtoMessage() {}

func (x *ReadShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadShardRequest.ProtoReflect.Descriptor instead.
func (*ReadShardRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{48}
}

func (x *ReadShardRequest) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

func (x *ReadShardRequest) GetMaxRecords() uint32 {
	if x != nil {
		return x.MaxRecords
	}
	return 0
}

type DeleteShardReaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReaderId string `protobuf:"bytes,1,opt,name=readerId,proto3" json:"readerId,omitempty"`
}

func (x *DeleteShardReaderRequest) Reset() {
	*x = DeleteShardReaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShardReaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShardReaderRequest) ProtoMessage() {}

func (x *DeleteShardReaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShardReaderRequest.ProtoReflect.Descriptor instead.
func (*DeleteShardReaderRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteShardReaderRequest) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

type ReadShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedRecords []*ReceivedRecord `protobuf:"bytes,1,rep,name=receivedRecords,proto3" json:"receivedRecords,omitempty"`
}

func (x *ReadShardResponse) Reset() {
	*x = ReadShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadShardResponse) ProtoMessage() {}

func (x *ReadShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadShardResponse.ProtoReflect.Descriptor instead.
func (*ReadShardResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{50}
}

func (x *ReadShardResponse) GetReceivedRecords() []*ReceivedRecord {
	if x != nil {
		return x.ReceivedRecords
	}
	return nil
}

type ListShardReadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListShardReadersRequest) Reset() {
	*x = ListShardReadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShardReadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShardReadersRequest) ProtoMessage() {}

func (x *ListShardReadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShardReadersRequest.ProtoReflect.Descriptor instead.
func (*ListShardReadersRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{51}
}

type ListShardReadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReaderId []string `protobuf:"bytes,1,rep,name=readerId,proto3" json:"readerId,omitempty"`
}

func (x *ListShardReadersResponse) Reset() {
	*x = ListShardReadersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShardReadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShardReadersResponse) ProtoMessage() {}

func (x *ListShardReadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShardReadersResponse.ProtoReflect.Descriptor instead.
func (*ListShardReadersResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{52}
}

func (x *ListShardReadersResponse) GetReaderId() []string {
	if x != nil {
		return x.ReaderId
	}
	return nil
}

type ReadShardStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReaderId string       `protobuf:"bytes,1,opt,name=readerId,proto3" json:"readerId,omitempty"`
	ShardId  uint64       `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	From     *ShardOffset `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// Total number of batches reader read at most
	MaxReadBatches uint64       `protobuf:"varint,4,opt,name=maxReadBatches,proto3" json:"maxReadBatches,omitempty"`
	Until          *ShardOffset `protobuf:"bytes,5,opt,name=until,proto3" json:"until,omitempty"`
	StreamName     string       `protobuf:"bytes,6,opt,name=streamName,proto3" json:"streamName,omitempty"`
}

func (x *ReadShardStreamRequest) Reset() {
	*x = ReadShardStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadShardStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadShardStreamRequest) ProtoMessage() {}

func (x *ReadShardStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadShardStreamRequest.ProtoReflect.Descriptor instead.
func (*ReadShardStreamRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{53}
}

func (x *ReadShardStreamRequest) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

func (x *ReadShardStreamRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ReadShardStreamRequest) GetFrom() *ShardOffset {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ReadShardStreamRequest) GetMaxReadBatches() uint64 {
	if x != nil {
		return x.MaxReadBatches
	}
	return 0
}

func (x *ReadShardStreamRequest) GetUntil() *ShardOffset {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *ReadShardStreamRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

type ReadShardStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedRecords []*ReceivedRecord `protobuf:"bytes,1,rep,name=receivedRecords,proto3" json:"receivedRecords,omitempty"`
}

func (x *ReadShardStreamResponse) Reset() {
	*x = ReadShardStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadShardStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadShardStreamResponse) ProtoMessage() {}

func (x *ReadShardStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadShardStreamResponse.ProtoReflect.Descriptor instead.
func (*ReadShardStreamResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{54}
}

func (x *ReadShardStreamResponse) GetReceivedRecords() []*ReceivedRecord {
	if x != nil {
		return x.ReceivedRecords
	}
	return nil
}

type StreamOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Offset:
	//
	//	*StreamOffset_SpecialOffset
	//	*StreamOffset_TimestampOffset
	Offset isStreamOffset_Offset `protobuf_oneof:"offset"`
}

func (x *StreamOffset) Reset() {
	*x = StreamOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOffset) ProtoMessage() {}

func (x *StreamOffset) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOffset.ProtoReflect.Descriptor instead.
func (*StreamOffset) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{55}
}

func (m *StreamOffset) GetOffset() isStreamOffset_Offset {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (x *StreamOffset) GetSpecialOffset() SpecialOffset {
	if x, ok := x.GetOffset().(*StreamOffset_SpecialOffset); ok {
		return x.SpecialOffset
	}
	return SpecialOffset_EARLIEST
}

func (x *StreamOffset) GetTimestampOffset() *TimestampOffset {
	if x, ok := x.GetOffset().(*StreamOffset_TimestampOffset); ok {
		return x.TimestampOffset
	}
	return nil
}

type isStreamOffset_Offset interface {
	isStreamOffset_Offset()
}

type StreamOffset_SpecialOffset struct {
	SpecialOffset SpecialOffset `protobuf:"varint,1,opt,name=specialOffset,proto3,enum=hstream.server.SpecialOffset,oneof"`
}

type StreamOffset_TimestampOffset struct {
	TimestampOffset *TimestampOffset `protobuf:"bytes,2,opt,name=timestampOffset,proto3,oneof"`
}

func (*StreamOffset_SpecialOffset) isStreamOffset_Offset() {}

func (*StreamOffset_TimestampOffset) isStreamOffset_Offset() {}

type ReadStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReaderId   string        `protobuf:"bytes,1,opt,name=readerId,proto3" json:"readerId,omitempty"`
	StreamName string        `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	From       *StreamOffset `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Until      *StreamOffset `protobuf:"bytes,4,opt,name=until,proto3" json:"until,omitempty"`
	// Total number of batches reader read at most
	MaxReadBatches uint64 `protobuf:"varint,5,opt,name=maxReadBatches,proto3" json:"maxReadBatches,omitempty"`
}

func (x *ReadStreamRequest) Reset() {
	*x = ReadStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStreamRequest) ProtoMessage() {}

func (x *ReadStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStreamRequest.ProtoReflect.Descriptor instead.
func (*ReadStreamRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{56}
}

func (x *ReadStreamRequest) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

func (x *ReadStreamRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *ReadStreamRequest) GetFrom() *StreamOffset {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ReadStreamRequest) GetUntil() *StreamOffset {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *ReadStreamRequest) GetMaxReadBatches() uint64 {
	if x != nil {
		return x.MaxReadBatches
	}
	return 0
}

type ReadStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedRecords []*ReceivedRecord `protobuf:"bytes,1,rep,name=receivedRecords,proto3" json:"receivedRecords,omitempty"`
}

func (x *ReadStreamResponse) Reset() {
	*x = ReadStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStreamResponse) ProtoMessage() {}

func (x *ReadStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStreamResponse.ProtoReflect.Descriptor instead.
func (*ReadStreamResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{57}
}

func (x *ReadStreamResponse) GetReceivedRecords() []*ReceivedRecord {
	if x != nil {
		return x.ReceivedRecords
	}
	return nil
}

type ReadStreamByKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReaderId   string       `protobuf:"bytes,1,opt,name=readerId,proto3" json:"readerId,omitempty"`
	StreamName string       `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	Key        string       `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	From       *ShardOffset `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Until      *ShardOffset `protobuf:"bytes,5,opt,name=until,proto3" json:"until,omitempty"`
	// total record return in next round read
	ReadRecordCount uint64 `protobuf:"varint,6,opt,name=readRecordCount,proto3" json:"readRecordCount,omitempty"`
}

func (x *ReadStreamByKeyRequest) Reset() {
	*x = ReadStreamByKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStreamByKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStreamByKeyRequest) ProtoMessage() {}

func (x *ReadStreamByKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStreamByKeyRequest.ProtoReflect.Descriptor instead.
func (*ReadStreamByKeyRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{58}
}

func (x *ReadStreamByKeyRequest) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

func (x *ReadStreamByKeyRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *ReadStreamByKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReadStreamByKeyRequest) GetFrom() *ShardOffset {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ReadStreamByKeyRequest) GetUntil() *ShardOffset {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *ReadStreamByKeyRequest) GetReadRecordCount() uint64 {
	if x != nil {
		return x.ReadRecordCount
	}
	return 0
}

type ReadStreamByKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordIds       []*RecordId      `protobuf:"bytes,1,rep,name=recordIds,proto3" json:"recordIds,omitempty"`
	ReceivedRecords []*HStreamRecord `protobuf:"bytes,2,rep,name=receivedRecords,proto3" json:"receivedRecords,omitempty"`
}

func (x *ReadStreamByKeyResponse) Reset() {
	*x = ReadStreamByKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStreamByKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStreamByKeyResponse) ProtoMessage() {}

func (x *ReadStreamByKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStreamByKeyResponse.ProtoReflect.Descriptor instead.
func (*ReadStreamByKeyResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{59}
}

func (x *ReadStreamByKeyResponse) GetRecordIds() []*RecordId {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

func (x *ReadStreamByKeyResponse) GetReceivedRecords() []*HStreamRecord {
	if x != nil {
		return x.ReceivedRecords
	}
	return nil
}

type ReadSingleShardStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReaderId   string       `protobuf:"bytes,1,opt,name=readerId,proto3" json:"readerId,omitempty"`
	StreamName string       `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	From       *ShardOffset `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Until      *ShardOffset `protobuf:"bytes,4,opt,name=until,proto3" json:"until,omitempty"`
	// Total number of batches reader read at most
	MaxReadBatches uint64 `protobuf:"varint,5,opt,name=maxReadBatches,proto3" json:"maxReadBatches,omitempty"`
}

func (x *ReadSingleShardStreamRequest) Reset() {
	*x = ReadSingleShardStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadSingleShardStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadSingleShardStreamRequest) ProtoMessage() {}

func (x *ReadSingleShardStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadSingleShardStreamRequest.ProtoReflect.Descriptor instead.
func (*ReadSingleShardStreamRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{60}
}

func (x *ReadSingleShardStreamRequest) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

func (x *ReadSingleShardStreamRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *ReadSingleShardStreamRequest) GetFrom() *ShardOffset {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ReadSingleShardStreamRequest) GetUntil() *ShardOffset {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *ReadSingleShardStreamRequest) GetMaxReadBatches() uint64 {
	if x != nil {
		return x.MaxReadBatches
	}
	return 0
}

type ReadSingleShardStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedRecords []*ReceivedRecord `protobuf:"bytes,1,rep,name=receivedRecords,proto3" json:"receivedRecords,omitempty"`
}

func (x *ReadSingleShardStreamResponse) Reset() {
	*x = ReadSingleShardStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadSingleShardStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadSingleShardStreamResponse) ProtoMessage() {}

func (x *ReadSingleShardStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadSingleShardStreamResponse.ProtoReflect.Descriptor instead.
func (*ReadSingleShardStreamResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{61}
}

func (x *ReadSingleShardStreamResponse) GetReceivedRecords() []*ReceivedRecord {
	if x != nil {
		return x.ReceivedRecords
	}
	return nil
}

type TerminateQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=queryId,proto3" json:"queryId,omitempty"`
}

func (x *TerminateQueryRequest) Reset() {
	*x = TerminateQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateQueryRequest) ProtoMessage() {}

func (x *TerminateQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateQueryRequest.ProtoReflect.Descriptor instead.
func (*TerminateQueryRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{62}
}

func (x *TerminateQueryRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

// Query realated Request and Response
type CreateQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql       string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	QueryName string `protobuf:"bytes,2,opt,name=queryName,proto3" json:"queryName,omitempty"`
}

func (x *CreateQueryRequest) Reset() {
	*x = CreateQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryRequest) ProtoMessage() {}

func (x *CreateQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryRequest.ProtoReflect.Descriptor instead.
func (*CreateQueryRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{63}
}

func (x *CreateQueryRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *CreateQueryRequest) GetQueryName() string {
	if x != nil {
		return x.QueryName
	}
	return ""
}

type CreateQueryWithNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql       string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	QueryName string `protobuf:"bytes,2,opt,name=queryName,proto3" json:"queryName,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *CreateQueryWithNamespaceRequest) Reset() {
	*x = CreateQueryWithNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryWithNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryWithNamespaceRequest) ProtoMessage() {}

func (x *CreateQueryWithNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryWithNamespaceRequest.ProtoReflect.Descriptor instead.
func (*CreateQueryWithNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{64}
}

func (x *CreateQueryWithNamespaceRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *CreateQueryWithNamespaceRequest) GetQueryName() string {
	if x != nil {
		return x.QueryName
	}
	return ""
}

func (x *CreateQueryWithNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ListQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListQueriesRequest) Reset() {
	*x = ListQueriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueriesRequest) ProtoMessage() {}

func (x *ListQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListQueriesRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{65}
}

type ListQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ListQueriesResponse) Reset() {
	*x = ListQueriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueriesResponse) ProtoMessage() {}

func (x *ListQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueriesResponse.ProtoReflect.Descriptor instead.
func (*ListQueriesResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{66}
}

func (x *ListQueriesResponse) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

type GetQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetQueryRequest) Reset() {
	*x = GetQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryRequest) ProtoMessage() {}

func (x *GetQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryRequest.ProtoReflect.Descriptor instead.
func (*GetQueryRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{67}
}

func (x *GetQueryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Consumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uri       string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	UserAgent string `protobuf:"bytes,3,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
}

func (x *Consumer) Reset() {
	*x = Consumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumer) ProtoMessage() {}

func (x *Consumer) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumer.ProtoReflect.Descriptor instead.
func (*Consumer) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{68}
}

func (x *Consumer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Consumer) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Consumer) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status      TaskStatusPB `protobuf:"varint,2,opt,name=status,proto3,enum=hstream.server.TaskStatusPB" json:"status,omitempty"`
	CreatedTime int64        `protobuf:"varint,3,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	QueryText   string       `protobuf:"bytes,4,opt,name=queryText,proto3" json:"queryText,omitempty"`
	Sources     []string     `protobuf:"bytes,5,rep,name=sources,proto3" json:"sources,omitempty"`
	ResultName  string       `protobuf:"bytes,6,opt,name=resultName,proto3" json:"resultName,omitempty"`
	// type:
	//
	//	CreateStreamAs: resultName is result stream name
	//	CreateViewAs: resultName is result view name
	Type QueryType `protobuf:"varint,7,opt,name=type,proto3,enum=hstream.server.QueryType" json:"type,omitempty"`
	// Id of the node to execute the query
	NodeId uint32 `protobuf:"varint,8,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{69}
}

func (x *Query) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Query) GetStatus() TaskStatusPB {
	if x != nil {
		return x.Status
	}
	return TaskStatusPB_TASK_CREATING
}

func (x *Query) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Query) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *Query) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Query) GetResultName() string {
	if x != nil {
		return x.ResultName
	}
	return ""
}

func (x *Query) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_CreateStreamAs
}

func (x *Query) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type DeleteQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteQueryRequest) Reset() {
	*x = DeleteQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQueryRequest) ProtoMessage() {}

func (x *DeleteQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQueryRequest.ProtoReflect.Descriptor instead.
func (*DeleteQueryRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteQueryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResumeQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResumeQueryRequest) Reset() {
	*x = ResumeQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeQueryRequest) ProtoMessage() {}

func (x *ResumeQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeQueryRequest.ProtoReflect.Descriptor instead.
func (*ResumeQueryRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{71}
}

func (x *ResumeQueryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PauseQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PauseQueryRequest) Reset() {
	*x = PauseQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseQueryRequest) ProtoMessage() {}

func (x *PauseQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseQueryRequest.ProtoReflect.Descriptor instead.
func (*PauseQueryRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{72}
}

func (x *PauseQueryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ParseSqlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *ParseSqlRequest) Reset() {
	*x = ParseSqlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseSqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseSqlRequest) ProtoMessage() {}

func (x *ParseSqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseSqlRequest.ProtoReflect.Descriptor instead.
func (*ParseSqlRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{73}
}

func (x *ParseSqlRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

type ParseSqlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sql:
	//
	//	*ParseSqlResponse_EvqSql
	Sql isParseSqlResponse_Sql `protobuf_oneof:"sql"`
}

func (x *ParseSqlResponse) Reset() {
	*x = ParseSqlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseSqlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseSqlResponse) ProtoMessage() {}

func (x *ParseSqlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseSqlResponse.ProtoReflect.Descriptor instead.
func (*ParseSqlResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{74}
}

func (m *ParseSqlResponse) GetSql() isParseSqlResponse_Sql {
	if m != nil {
		return m.Sql
	}
	return nil
}

func (x *ParseSqlResponse) GetEvqSql() *ExecuteViewQuerySql {
	if x, ok := x.GetSql().(*ParseSqlResponse_EvqSql); ok {
		return x.EvqSql
	}
	return nil
}

type isParseSqlResponse_Sql interface {
	isParseSqlResponse_Sql()
}

type ParseSqlResponse_EvqSql struct {
	EvqSql *ExecuteViewQuerySql `protobuf:"bytes,1,opt,name=evqSql,proto3,oneof"`
}

func (*ParseSqlResponse_EvqSql) isParseSqlResponse_Sql() {}

type ColumnCatalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type       string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	IsNullable bool   `protobuf:"varint,4,opt,name=isNullable,proto3" json:"isNullable,omitempty"`
	IsHidden   bool   `protobuf:"varint,5,opt,name=isHidden,proto3" json:"isHidden,omitempty"`
}

func (x *ColumnCatalog) Reset() {
	*x = ColumnCatalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnCatalog) ProtoMessage() {}

func (x *ColumnCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnCatalog.ProtoReflect.Descriptor instead.
func (*ColumnCatalog) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{75}
}

func (x *ColumnCatalog) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ColumnCatalog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnCatalog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ColumnCatalog) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *ColumnCatalog) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner   string           `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Columns []*ColumnCatalog `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{76}
}

func (x *Schema) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Schema) GetColumns() []*ColumnCatalog {
	if x != nil {
		return x.Columns
	}
	return nil
}

type GetSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{77}
}

func (x *GetSchemaRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type UnregisterSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *UnregisterSchemaRequest) Reset() {
	*x = UnregisterSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterSchemaRequest) ProtoMessage() {}

func (x *UnregisterSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterSchemaRequest.ProtoReflect.Descriptor instead.
func (*UnregisterSchemaRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{78}
}

func (x *UnregisterSchemaRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type ExecuteViewQuerySql struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View string `protobuf:"bytes,1,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *ExecuteViewQuerySql) Reset() {
	*x = ExecuteViewQuerySql{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteViewQuerySql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteViewQuerySql) ProtoMessage() {}

func (x *ExecuteViewQuerySql) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteViewQuerySql.ProtoReflect.Descriptor instead.
func (*ExecuteViewQuerySql) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{79}
}

func (x *ExecuteViewQuerySql) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

// Connector Related Request and Response
type CreateConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Config string `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateConnectorRequest) Reset() {
	*x = CreateConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectorRequest) ProtoMessage() {}

func (x *CreateConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectorRequest.ProtoReflect.Descriptor instead.
func (*CreateConnectorRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{80}
}

func (x *CreateConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateConnectorRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateConnectorRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *CreateConnectorRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type ListConnectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConnectorsRequest) Reset() {
	*x = ListConnectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectorsRequest) ProtoMessage() {}

func (x *ListConnectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectorsRequest.ProtoReflect.Descriptor instead.
func (*ListConnectorsRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{81}
}

type ListConnectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connectors []*Connector `protobuf:"bytes,1,rep,name=connectors,proto3" json:"connectors,omitempty"`
}

func (x *ListConnectorsResponse) Reset() {
	*x = ListConnectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectorsResponse) ProtoMessage() {}

func (x *ListConnectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectorsResponse.ProtoReflect.Descriptor instead.
func (*ListConnectorsResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{82}
}

func (x *ListConnectorsResponse) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

type GetConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetConnectorRequest) Reset() {
	*x = GetConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorRequest) ProtoMessage() {}

func (x *GetConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorRequest.ProtoReflect.Descriptor instead.
func (*GetConnectorRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{83}
}

func (x *GetConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetConnectorSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SOURCE or SINK
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// e.g. mysql, postgresql, etc.
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *GetConnectorSpecRequest) Reset() {
	*x = GetConnectorSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectorSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorSpecRequest) ProtoMessage() {}

func (x *GetConnectorSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorSpecRequest.ProtoReflect.Descriptor instead.
func (*GetConnectorSpecRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{84}
}

func (x *GetConnectorSpecRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetConnectorSpecRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type GetConnectorSpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec string `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *GetConnectorSpecResponse) Reset() {
	*x = GetConnectorSpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectorSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorSpecResponse) ProtoMessage() {}

func (x *GetConnectorSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorSpecResponse.ProtoReflect.Descriptor instead.
func (*GetConnectorSpecResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{85}
}

func (x *GetConnectorSpecResponse) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

type GetConnectorLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Begin int32  `protobuf:"varint,2,opt,name=begin,proto3" json:"begin,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetConnectorLogsRequest) Reset() {
	*x = GetConnectorLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectorLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorLogsRequest) ProtoMessage() {}

func (x *GetConnectorLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorLogsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectorLogsRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{86}
}

func (x *GetConnectorLogsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetConnectorLogsRequest) GetBegin() int32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *GetConnectorLogsRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetConnectorLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs string `protobuf:"bytes,1,opt,name=logs,proto3" json:"logs,omitempty"`
}

func (x *GetConnectorLogsResponse) Reset() {
	*x = GetConnectorLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectorLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorLogsResponse) ProtoMessage() {}

func (x *GetConnectorLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorLogsResponse.ProtoReflect.Descriptor instead.
func (*GetConnectorLogsResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{87}
}

func (x *GetConnectorLogsResponse) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

type Connector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Target       string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	Status       string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Config       string                 `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	Offsets      []*structpb.Struct     `protobuf:"bytes,7,rep,name=offsets,proto3" json:"offsets,omitempty"`
	TaskId       string                 `protobuf:"bytes,8,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Node         string                 `protobuf:"bytes,9,opt,name=node,proto3" json:"node,omitempty"`
	DockerStatus string                 `protobuf:"bytes,10,opt,name=dockerStatus,proto3" json:"dockerStatus,omitempty"`
	Image        string                 `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *Connector) Reset() {
	*x = Connector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connector) ProtoMessage() {}

func (x *Connector) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{88}
}

func (x *Connector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connector) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Connector) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Connector) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Connector) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Connector) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Connector) GetOffsets() []*structpb.Struct {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *Connector) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Connector) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Connector) GetDockerStatus() string {
	if x != nil {
		return x.DockerStatus
	}
	return ""
}

func (x *Connector) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type DeleteConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteConnectorRequest) Reset() {
	*x = DeleteConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectorRequest) ProtoMessage() {}

func (x *DeleteConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectorRequest.ProtoReflect.Descriptor instead.
func (*DeleteConnectorRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{89}
}

func (x *DeleteConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PauseConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PauseConnectorRequest) Reset() {
	*x = PauseConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseConnectorRequest) ProtoMessage() {}

func (x *PauseConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseConnectorRequest.ProtoReflect.Descriptor instead.
func (*PauseConnectorRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{90}
}

func (x *PauseConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResumeConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResumeConnectorRequest) Reset() {
	*x = ResumeConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeConnectorRequest) ProtoMessage() {}

func (x *ResumeConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeConnectorRequest.ProtoReflect.Descriptor instead.
func (*ResumeConnectorRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{91}
}

func (x *ResumeConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// View related Request and Response
type GetViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *GetViewRequest) Reset() {
	*x = GetViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewRequest) ProtoMessage() {}

func (x *GetViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewRequest.ProtoReflect.Descriptor instead.
func (*GetViewRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{92}
}

func (x *GetViewRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

type DeleteViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId         string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	IgnoreNonExist bool   `protobuf:"varint,2,opt,name=ignoreNonExist,proto3" json:"ignoreNonExist,omitempty"`
}

func (x *DeleteViewRequest) Reset() {
	*x = DeleteViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteViewRequest) ProtoMessage() {}

func (x *DeleteViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteViewRequest.ProtoReflect.Descriptor instead.
func (*DeleteViewRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{93}
}

func (x *DeleteViewRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *DeleteViewRequest) GetIgnoreNonExist() bool {
	if x != nil {
		return x.IgnoreNonExist
	}
	return false
}

type ListViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListViewsRequest) Reset() {
	*x = ListViewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListViewsRequest) ProtoMessage() {}

func (x *ListViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListViewsRequest.ProtoReflect.Descriptor instead.
func (*ListViewsRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{94}
}

type ListViewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Views []*View `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty"`
}

func (x *ListViewsResponse) Reset() {
	*x = ListViewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListViewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListViewsResponse) ProtoMessage() {}

func (x *ListViewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListViewsResponse.ProtoReflect.Descriptor instead.
func (*ListViewsResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{95}
}

func (x *ListViewsResponse) GetViews() []*View {
	if x != nil {
		return x.Views
	}
	return nil
}

type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId      string       `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	Status      TaskStatusPB `protobuf:"varint,2,opt,name=status,proto3,enum=hstream.server.TaskStatusPB" json:"status,omitempty"`
	CreatedTime int64        `protobuf:"varint,3,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	Sql         string       `protobuf:"bytes,4,opt,name=sql,proto3" json:"sql,omitempty"`
	Schema      []string     `protobuf:"bytes,5,rep,name=schema,proto3" json:"schema,omitempty"`
	QueryName   string       `protobuf:"bytes,6,opt,name=queryName,proto3" json:"queryName,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{96}
}

func (x *View) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *View) GetStatus() TaskStatusPB {
	if x != nil {
		return x.Status
	}
	return TaskStatusPB_TASK_CREATING
}

func (x *View) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *View) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *View) GetSchema() []string {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *View) GetQueryName() string {
	if x != nil {
		return x.QueryName
	}
	return ""
}

type ExecuteViewQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*structpb.Struct `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ExecuteViewQueryResponse) Reset() {
	*x = ExecuteViewQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteViewQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteViewQueryResponse) ProtoMessage() {}

func (x *ExecuteViewQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteViewQueryResponse.ProtoReflect.Descriptor instead.
func (*ExecuteViewQueryResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{97}
}

func (x *ExecuteViewQueryResponse) GetResults() []*structpb.Struct {
	if x != nil {
		return x.Results
	}
	return nil
}

type ExecuteViewQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *ExecuteViewQueryRequest) Reset() {
	*x = ExecuteViewQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteViewQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteViewQueryRequest) ProtoMessage() {}

func (x *ExecuteViewQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteViewQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteViewQueryRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{98}
}

func (x *ExecuteViewQueryRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

type ExecuteViewQueryWithNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql       string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ExecuteViewQueryWithNamespaceRequest) Reset() {
	*x = ExecuteViewQueryWithNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteViewQueryWithNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteViewQueryWithNamespaceRequest) ProtoMessage() {}

func (x *ExecuteViewQueryWithNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteViewQueryWithNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ExecuteViewQueryWithNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{99}
}

func (x *ExecuteViewQueryWithNamespaceRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *ExecuteViewQueryWithNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type StatsIntervalVals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intervals []int32 `protobuf:"varint,1,rep,packed,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *StatsIntervalVals) Reset() {
	*x = StatsIntervalVals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsIntervalVals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsIntervalVals) ProtoMessage() {}

func (x *StatsIntervalVals) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsIntervalVals.ProtoReflect.Descriptor instead.
func (*StatsIntervalVals) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{100}
}

func (x *StatsIntervalVals) GetIntervals() []int32 {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type StatsDoubleVals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals []float64 `protobuf:"fixed64,1,rep,packed,name=vals,proto3" json:"vals,omitempty"`
}

func (x *StatsDoubleVals) Reset() {
	*x = StatsDoubleVals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsDoubleVals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsDoubleVals) ProtoMessage() {}

func (x *StatsDoubleVals) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsDoubleVals.ProtoReflect.Descriptor instead.
func (*StatsDoubleVals) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{101}
}

func (x *StatsDoubleVals) GetVals() []float64 {
	if x != nil {
		return x.Vals
	}
	return nil
}

type AdminCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *AdminCommandRequest) Reset() {
	*x = AdminCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCommandRequest) ProtoMessage() {}

func (x *AdminCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCommandRequest.ProtoReflect.Descriptor instead.
func (*AdminCommandRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{102}
}

func (x *AdminCommandRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type AdminCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AdminCommandResponse) Reset() {
	*x = AdminCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCommandResponse) ProtoMessage() {}

func (x *AdminCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCommandResponse.ProtoReflect.Descriptor instead.
func (*AdminCommandResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{103}
}

func (x *AdminCommandResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type PerStreamTimeSeriesStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method     string             `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	StreamName string             `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	Intervals  *StatsIntervalVals `protobuf:"bytes,3,opt,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *PerStreamTimeSeriesStatsRequest) Reset() {
	*x = PerStreamTimeSeriesStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerStreamTimeSeriesStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerStreamTimeSeriesStatsRequest) ProtoMessage() {}

func (x *PerStreamTimeSeriesStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerStreamTimeSeriesStatsRequest.ProtoReflect.Descriptor instead.
func (*PerStreamTimeSeriesStatsRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{104}
}

func (x *PerStreamTimeSeriesStatsRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *PerStreamTimeSeriesStatsRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *PerStreamTimeSeriesStatsRequest) GetIntervals() *StatsIntervalVals {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type PerStreamTimeSeriesStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *StatsDoubleVals `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *PerStreamTimeSeriesStatsResponse) Reset() {
	*x = PerStreamTimeSeriesStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerStreamTimeSeriesStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerStreamTimeSeriesStatsResponse) ProtoMessage() {}

func (x *PerStreamTimeSeriesStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerStreamTimeSeriesStatsResponse.ProtoReflect.Descriptor instead.
func (*PerStreamTimeSeriesStatsResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{105}
}

func (x *PerStreamTimeSeriesStatsResponse) GetStats() *StatsDoubleVals {
	if x != nil {
		return x.Stats
	}
	return nil
}

type PerStreamTimeSeriesStatsAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats map[string]*StatsDoubleVals `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PerStreamTimeSeriesStatsAllResponse) Reset() {
	*x = PerStreamTimeSeriesStatsAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerStreamTimeSeriesStatsAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerStreamTimeSeriesStatsAllResponse) ProtoMessage() {}

func (x *PerStreamTimeSeriesStatsAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerStreamTimeSeriesStatsAllResponse.ProtoReflect.Descriptor instead.
func (*PerStreamTimeSeriesStatsAllResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{106}
}

func (x *PerStreamTimeSeriesStatsAllResponse) GetStats() map[string]*StatsDoubleVals {
	if x != nil {
		return x.Stats
	}
	return nil
}

type PerStreamTimeSeriesStatsAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method    string             `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Intervals *StatsIntervalVals `protobuf:"bytes,2,opt,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *PerStreamTimeSeriesStatsAllRequest) Reset() {
	*x = PerStreamTimeSeriesStatsAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerStreamTimeSeriesStatsAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerStreamTimeSeriesStatsAllRequest) ProtoMessage() {}

func (x *PerStreamTimeSeriesStatsAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerStreamTimeSeriesStatsAllRequest.ProtoReflect.Descriptor instead.
func (*PerStreamTimeSeriesStatsAllRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{107}
}

func (x *PerStreamTimeSeriesStatsAllRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *PerStreamTimeSeriesStatsAllRequest) GetIntervals() *StatsIntervalVals {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type DescribeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion   string              `protobuf:"bytes,1,opt,name=protocolVersion,proto3" json:"protocolVersion,omitempty"`
	ServerNodes       []*ServerNode       `protobuf:"bytes,2,rep,name=serverNodes,proto3" json:"serverNodes,omitempty"`
	ServerNodesStatus []*ServerNodeStatus `protobuf:"bytes,3,rep,name=serverNodesStatus,proto3" json:"serverNodesStatus,omitempty"`
	ClusterUpTime     uint64              `protobuf:"varint,4,opt,name=clusterUpTime,proto3" json:"clusterUpTime,omitempty"`
}

func (x *DescribeClusterResponse) Reset() {
	*x = DescribeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeClusterResponse) ProtoMessage() {}

func (x *DescribeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeClusterResponse.ProtoReflect.Descriptor instead.
func (*DescribeClusterResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{108}
}

func (x *DescribeClusterResponse) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *DescribeClusterResponse) GetServerNodes() []*ServerNode {
	if x != nil {
		return x.ServerNodes
	}
	return nil
}

func (x *DescribeClusterResponse) GetServerNodesStatus() []*ServerNodeStatus {
	if x != nil {
		return x.ServerNodesStatus
	}
	return nil
}

func (x *DescribeClusterResponse) GetClusterUpTime() uint64 {
	if x != nil {
		return x.ClusterUpTime
	}
	return 0
}

type ServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Host    string          `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port    uint32          `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Version *HStreamVersion `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServerNode) Reset() {
	*x = ServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNode) ProtoMessage() {}

func (x *ServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNode.ProtoReflect.Descriptor instead.
func (*ServerNode) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{109}
}

func (x *ServerNode) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServerNode) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ServerNode) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServerNode) GetVersion() *HStreamVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type ServerNodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node  *ServerNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	State NodeState   `protobuf:"varint,2,opt,name=state,proto3,enum=hstream.server.NodeState" json:"state,omitempty"`
}

func (x *ServerNodeStatus) Reset() {
	*x = ServerNodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNodeStatus) ProtoMessage() {}

func (x *ServerNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNodeStatus.ProtoReflect.Descriptor instead.
func (*ServerNodeStatus) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{110}
}

func (x *ServerNodeStatus) GetNode() *ServerNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ServerNodeStatus) GetState() NodeState {
	if x != nil {
		return x.State
	}
	return NodeState_Starting
}

type HStreamVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Commit  string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *HStreamVersion) Reset() {
	*x = HStreamVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HStreamVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HStreamVersion) ProtoMessage() {}

func (x *HStreamVersion) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HStreamVersion.ProtoReflect.Descriptor instead.
func (*HStreamVersion) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{111}
}

func (x *HStreamVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HStreamVersion) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type LookupShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId uint64 `protobuf:"varint,1,opt,name=shardId,proto3" json:"shardId,omitempty"`
}

func (x *LookupShardRequest) Reset() {
	*x = LookupShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupShardRequest) ProtoMessage() {}

func (x *LookupShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupShardRequest.ProtoReflect.Descriptor instead.
func (*LookupShardRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{112}
}

func (x *LookupShardRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type LookupShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId    uint64      `protobuf:"varint,1,opt,name=shardId,proto3" json:"shardId,omitempty"`
	ServerNode *ServerNode `protobuf:"bytes,2,opt,name=serverNode,proto3" json:"serverNode,omitempty"`
}

func (x *LookupShardResponse) Reset() {
	*x = LookupShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupShardResponse) ProtoMessage() {}

func (x *LookupShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupShardResponse.ProtoReflect.Descriptor instead.
func (*LookupShardResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{113}
}

func (x *LookupShardResponse) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *LookupShardResponse) GetServerNode() *ServerNode {
	if x != nil {
		return x.ServerNode
	}
	return nil
}

type LookupSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
}

func (x *LookupSubscriptionRequest) Reset() {
	*x = LookupSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupSubscriptionRequest) ProtoMessage() {}

func (x *LookupSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*LookupSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{114}
}

func (x *LookupSubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type LookupSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string      `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	ServerNode     *ServerNode `protobuf:"bytes,2,opt,name=serverNode,proto3" json:"serverNode,omitempty"`
}

func (x *LookupSubscriptionResponse) Reset() {
	*x = LookupSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupSubscriptionResponse) ProtoMessage() {}

func (x *LookupSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*LookupSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{115}
}

func (x *LookupSubscriptionResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *LookupSubscriptionResponse) GetServerNode() *ServerNode {
	if x != nil {
		return x.ServerNode
	}
	return nil
}

type LookupShardReaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReaderId string `protobuf:"bytes,1,opt,name=readerId,proto3" json:"readerId,omitempty"`
}

func (x *LookupShardReaderRequest) Reset() {
	*x = LookupShardReaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupShardReaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupShardReaderRequest) ProtoMessage() {}

func (x *LookupShardReaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupShardReaderRequest.ProtoReflect.Descriptor instead.
func (*LookupShardReaderRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{116}
}

func (x *LookupShardReaderRequest) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

type LookupShardReaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReaderId   string      `protobuf:"bytes,1,opt,name=readerId,proto3" json:"readerId,omitempty"`
	ServerNode *ServerNode `protobuf:"bytes,2,opt,name=serverNode,proto3" json:"serverNode,omitempty"`
}

func (x *LookupShardReaderResponse) Reset() {
	*x = LookupShardReaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupShardReaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupShardReaderResponse) ProtoMessage() {}

func (x *LookupShardReaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupShardReaderResponse.ProtoReflect.Descriptor instead.
func (*LookupShardReaderResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{117}
}

func (x *LookupShardReaderResponse) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

func (x *LookupShardReaderResponse) GetServerNode() *ServerNode {
	if x != nil {
		return x.ServerNode
	}
	return nil
}

type LookupResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResType ResourceType `protobuf:"varint,1,opt,name=resType,proto3,enum=hstream.server.ResourceType" json:"resType,omitempty"`
	ResId   string       `protobuf:"bytes,2,opt,name=resId,proto3" json:"resId,omitempty"`
}

func (x *LookupResourceRequest) Reset() {
	*x = LookupResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupResourceRequest) ProtoMessage() {}

func (x *LookupResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupResourceRequest.ProtoReflect.Descriptor instead.
func (*LookupResourceRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{118}
}

func (x *LookupResourceRequest) GetResType() ResourceType {
	if x != nil {
		return x.ResType
	}
	return ResourceType_ResStream
}

func (x *LookupResourceRequest) GetResId() string {
	if x != nil {
		return x.ResId
	}
	return ""
}

type LookupKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionKey string `protobuf:"bytes,1,opt,name=partitionKey,proto3" json:"partitionKey,omitempty"`
}

func (x *LookupKeyRequest) Reset() {
	*x = LookupKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupKeyRequest) ProtoMessage() {}

func (x *LookupKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupKeyRequest.ProtoReflect.Descriptor instead.
func (*LookupKeyRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{119}
}

func (x *LookupKeyRequest) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

type GetTailRecordIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	ShardId    uint64 `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
}

func (x *GetTailRecordIdRequest) Reset() {
	*x = GetTailRecordIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTailRecordIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTailRecordIdRequest) ProtoMessage() {}

func (x *GetTailRecordIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTailRecordIdRequest.ProtoReflect.Descriptor instead.
func (*GetTailRecordIdRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{120}
}

func (x *GetTailRecordIdRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *GetTailRecordIdRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type GetTailRecordIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TailRecordId *RecordId `protobuf:"bytes,1,opt,name=tailRecordId,proto3" json:"tailRecordId,omitempty"`
}

func (x *GetTailRecordIdResponse) Reset() {
	*x = GetTailRecordIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTailRecordIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTailRecordIdResponse) ProtoMessage() {}

func (x *GetTailRecordIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTailRecordIdResponse.ProtoReflect.Descriptor instead.
func (*GetTailRecordIdResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{121}
}

func (x *GetTailRecordIdResponse) GetTailRecordId() *RecordId {
	if x != nil {
		return x.TailRecordId
	}
	return nil
}

type StatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Stat:
	//
	//	*StatType_StreamStat
	//	*StatType_SubStat
	//	*StatType_ConnStat
	//	*StatType_QueryStat
	//	*StatType_ViewStat
	Stat isStatType_Stat `protobuf_oneof:"stat"`
}

func (x *StatType) Reset() {
	*x = StatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatType) ProtoMessage() {}

func (x *StatType) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatType.ProtoReflect.Descriptor instead.
func (*StatType) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{122}
}

func (m *StatType) GetStat() isStatType_Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (x *StatType) GetStreamStat() StreamStats {
	if x, ok := x.GetStat().(*StatType_StreamStat); ok {
		return x.StreamStat
	}
	return StreamStats_AppendInBytes
}

func (x *StatType) GetSubStat() SubscriptionStats {
	if x, ok := x.GetStat().(*StatType_SubStat); ok {
		return x.SubStat
	}
	return SubscriptionStats_SendOutBytes
}

func (x *StatType) GetConnStat() ConnectorStats {
	if x, ok := x.GetStat().(*StatType_ConnStat); ok {
		return x.ConnStat
	}
	return ConnectorStats_DeliveredInRecords
}

func (x *StatType) GetQueryStat() QueryStats {
	if x, ok := x.GetStat().(*StatType_QueryStat); ok {
		return x.QueryStat
	}
	return QueryStats_TotalInputRecords
}

func (x *StatType) GetViewStat() ViewStats {
	if x, ok := x.GetStat().(*StatType_ViewStat); ok {
		return x.ViewStat
	}
	return ViewStats_TotalExecuteQueries
}

type isStatType_Stat interface {
	isStatType_Stat()
}

type StatType_StreamStat struct {
	StreamStat StreamStats `protobuf:"varint,1,opt,name=streamStat,proto3,enum=hstream.server.StreamStats,oneof"`
}

type StatType_SubStat struct {
	SubStat SubscriptionStats `protobuf:"varint,2,opt,name=subStat,proto3,enum=hstream.server.SubscriptionStats,oneof"`
}

type StatType_ConnStat struct {
	ConnStat ConnectorStats `protobuf:"varint,3,opt,name=connStat,proto3,enum=hstream.server.ConnectorStats,oneof"`
}

type StatType_QueryStat struct {
	QueryStat QueryStats `protobuf:"varint,4,opt,name=queryStat,proto3,enum=hstream.server.QueryStats,oneof"`
}

type StatType_ViewStat struct {
	ViewStat ViewStats `protobuf:"varint,5,opt,name=viewStat,proto3,enum=hstream.server.ViewStats,oneof"`
}

func (*StatType_StreamStat) isStatType_Stat() {}

func (*StatType_SubStat) isStatType_Stat() {}

func (*StatType_ConnStat) isStatType_Stat() {}

func (*StatType_QueryStat) isStatType_Stat() {}

func (*StatType_ViewStat) isStatType_Stat() {}

type StatValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatType   *StatType        `protobuf:"bytes,1,opt,name=statType,proto3" json:"statType,omitempty"`
	StatValues map[string]int64 `protobuf:"bytes,2,rep,name=statValues,proto3" json:"statValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StatValue) Reset() {
	*x = StatValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatValue) ProtoMessage() {}

func (x *StatValue) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatValue.ProtoReflect.Descriptor instead.
func (*StatValue) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{123}
}

func (x *StatValue) GetStatType() *StatType {
	if x != nil {
		return x.StatType
	}
	return nil
}

func (x *StatValue) GetStatValues() map[string]int64 {
	if x != nil {
		return x.StatValues
	}
	return nil
}

type StatError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatType *StatType `protobuf:"bytes,1,opt,name=statType,proto3" json:"statType,omitempty"`
	Message  string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StatError) Reset() {
	*x = StatError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatError) ProtoMessage() {}

func (x *StatError) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatError.ProtoReflect.Descriptor instead.
func (*StatError) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{124}
}

func (x *StatError) GetStatType() *StatType {
	if x != nil {
		return x.StatType
	}
	return nil
}

func (x *StatError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*StatType `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GetStatsRequest) Reset() {
	*x = GetStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsRequest) ProtoMessage() {}

func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{125}
}

func (x *GetStatsRequest) GetStats() []*StatType {
	if x != nil {
		return x.Stats
	}
	return nil
}

type GetStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatsValues []*StatValue `protobuf:"bytes,1,rep,name=statsValues,proto3" json:"statsValues,omitempty"`
	Errors      []*StatError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetStatsResponse) Reset() {
	*x = GetStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hstream_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsResponse) ProtoMessage() {}

func (x *GetStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hstream_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsResponse.ProtoReflect.Descriptor instead.
func (*GetStatsResponse) Descriptor() ([]byte, []int) {
	return file_hstream_proto_rawDescGZIP(), []int{126}
}

func (x *GetStatsResponse) GetStatsValues() []*StatValue {
	if x != nil {
		return x.StatsValues
	}
	return nil
}

func (x *GetStatsResponse) GetErrors() []*StatError {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_hstream_proto protoreflect.FileDescriptor

var file_hstream_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x0f, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x4d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x49, 0x6e, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x41, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x22, 0xeb, 0x01, 0x0a,
	0x0b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0d,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x1f, 0x0a, 0x0b, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x20, 0x0a, 0x0c, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x34, 0x0a,
	0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x71,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x71, 0x6c, 0x22, 0x3e, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x62, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a,
	0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x6d, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x6d, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x4e, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x82, 0x01, 0x0a,
	0x0e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x73, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x55,
	0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3e, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x48, 0x0a,
	0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x22, 0x59, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x47, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x38, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x15,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x52, 0x06, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x73, 0x22, 0x62, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x7f, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x73, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x73, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e,
	0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x47, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3c, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x5d,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4f, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x6f,
	0x0a, 0x11, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x52, 0x09, 0x74, 0x72, 0x69, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0x51, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x74, 0x72, 0x69,
	0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x69, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x54, 0x72, 0x69, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x54, 0x72, 0x69, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a,
	0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xd0, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x66, 0x0a, 0x0d, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4e, 0x0a, 0x13, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x13, 0x48,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x53, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x19, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x08,
	0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10,
	0x01, 0x22, 0x5e, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xcb, 0x01, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0x33, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x54, 0x72,
	0x69, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x6d,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x09, 0x74, 0x72, 0x69, 0x6d, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0xca, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x4e, 0x0a, 0x10,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x36, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x05, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x4b, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x05, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x05, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0x31, 0x0a, 0x15, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x46, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x08, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x24, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x11, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x0f,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71,
	0x6c, 0x22, 0x58, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x76, 0x71, 0x53, 0x71, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x71, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x65, 0x76,
	0x71, 0x53, 0x71, 0x6c, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x0d,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x22, 0x28, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x17, 0x55, 0x6e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x13, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x71, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x70, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x53, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x45, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x59, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x53, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x6e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x71, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x2b, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x71, 0x6c, 0x22, 0x56, 0x0a, 0x24, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x31, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22,
	0x25, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x2e, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x1f, 0x50, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x22, 0x59, 0x0a, 0x20, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22,
	0xd6, 0x01, 0x0a, 0x23, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x59, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a, 0x22, 0x50, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x73, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x7e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x73, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x42, 0x0a, 0x0e, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x13, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x43, 0x0a, 0x19, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a,
	0x1a, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22,
	0x36, 0x0a, 0x18, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x19, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x65, 0x0a, 0x15,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x73, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x10, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22,
	0x57, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x52, 0x0c, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x3a, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x08, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x22, 0xcb,
	0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x82, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2a, 0x29, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x52, 0x4c, 0x49, 0x45, 0x53, 0x54, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x2f, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x7a, 0x69,
	0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x73, 0x74, 0x64, 0x10, 0x02, 0x2a, 0x90, 0x01,
	0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x41, 0x42, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06,
	0x2a, 0x31, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x41,
	0x73, 0x10, 0x01, 0x2a, 0x41, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x65, 0x61, 0x64, 0x10, 0x03, 0x2a, 0x81, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x10, 0x06, 0x2a, 0x7c, 0x0a, 0x0b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x10, 0x05, 0x2a, 0xcf, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x73, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x10, 0x08, 0x2a, 0x3e, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x10, 0x01, 0x2a, 0x53, 0x0a, 0x0a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x10, 0x02, 0x2a,
	0x24, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x10, 0x00, 0x2a, 0xa4, 0x09, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xc8, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0xc9, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xca, 0x01, 0x12, 0x1f, 0x0a, 0x1a,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x10, 0xcb, 0x01, 0x12, 0x22, 0x0a,
	0x1d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0xcc,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xcd, 0x01, 0x12,
	0x1d, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0xce, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x10, 0xcf, 0x01, 0x12, 0x18, 0x0a, 0x13,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x10, 0xd0, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x10,
	0xd1, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0xd2, 0x01, 0x12, 0x19, 0x0a,
	0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xac, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0xad,
	0x02, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4e, 0x6f, 0x6e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0xae, 0x02, 0x12,
	0x1e, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x10, 0xaf, 0x02, 0x12,
	0x28, 0x0a, 0x23, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0xb0, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x10, 0xb1, 0x02,
	0x12, 0x12, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0x90, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x10, 0x91, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x51, 0x4c, 0x10, 0x92, 0x03, 0x12, 0x1d, 0x0a, 0x18,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x10, 0x93, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x94, 0x03, 0x12, 0x16,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x69, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x10, 0x95, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x96, 0x03, 0x12, 0x17, 0x0a, 0x12,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x97, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x10,
	0x98, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x56, 0x69, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0xf4, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x10, 0xf5, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x51, 0x4c, 0x10, 0xf6, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x56,
	0x69, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0xf7, 0x03, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0xd8, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0xd9, 0x04, 0x12, 0x19, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xda, 0x04, 0x12, 0x25, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0xdb, 0x04, 0x12, 0x19, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xdc, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x10, 0xdd, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0xde, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x10, 0xa0, 0x06, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x84, 0x07, 0x12, 0x1e, 0x0a,
	0x19, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x10, 0x85, 0x07, 0x12, 0x1d, 0x0a,
	0x18, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x4d,
	0x61, 0x6e, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x10, 0x86, 0x07, 0x32, 0xfc, 0x2d, 0x0a,
	0x0a, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x69, 0x12, 0x41, 0x0a, 0x04, 0x45,
	0x63, 0x68, 0x6f, 0x12, 0x1b, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16,
	0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x23, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e,
	0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x69, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a, 0x54, 0x72,
	0x69, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69,
	0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20,
	0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x0b, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x22, 0x2e, 0x68,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x12, 0x1d, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x26, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x68,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x69, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x2e,
	0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x20, 0x2e,
	0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x27, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x68,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x2c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x68, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x1c, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7e, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x32, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x73, 0x12, 0x24, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e,
	0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x25, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x54, 0x0a,
	0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x23, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2f, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x32, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x2e,
	0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x24, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x22, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x22, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0a, 0x50, 0x61, 0x75, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21,
	0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x53, 0x71, 0x6c, 0x12, 0x1f, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x71,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x16,
	0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x20, 0x2e,
	0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x27, 0x2e,
	0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x27, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x26, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x68, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x20, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x21, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x27, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3f, 0x0a, 0x13, 0x69,
	0x6f, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x42, 0x0c, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x18, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x62, 0x2f, 0x68, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hstream_proto_rawDescOnce sync.Once
	file_hstream_proto_rawDescData = file_hstream_proto_rawDesc
)

func file_hstream_proto_rawDescGZIP() []byte {
	file_hstream_proto_rawDescOnce.Do(func() {
		file_hstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_hstream_proto_rawDescData)
	})
	return file_hstream_proto_rawDescData
}

var file_hstream_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_hstream_proto_msgTypes = make([]protoimpl.MessageInfo, 131)
var file_hstream_proto_goTypes = []interface{}{
	(SpecialOffset)(0),                           // 0: hstream.server.SpecialOffset
	(CompressionType)(0),                         // 1: hstream.server.CompressionType
	(TaskStatusPB)(0),                            // 2: hstream.server.TaskStatusPB
	(QueryType)(0),                               // 3: hstream.server.QueryType
	(NodeState)(0),                               // 4: hstream.server.NodeState
	(ResourceType)(0),                            // 5: hstream.server.ResourceType
	(StreamStats)(0),                             // 6: hstream.server.StreamStats
	(SubscriptionStats)(0),                       // 7: hstream.server.SubscriptionStats
	(ConnectorStats)(0),                          // 8: hstream.server.ConnectorStats
	(QueryStats)(0),                              // 9: hstream.server.QueryStats
	(ViewStats)(0),                               // 10: hstream.server.ViewStats
	(ErrorCode)(0),                               // 11: hstream.server.ErrorCode
	(HStreamRecordHeader_Flag)(0),                // 12: hstream.server.HStreamRecordHeader.Flag
	(*TimestampOffset)(nil),                      // 13: hstream.server.TimestampOffset
	(*ShardOffset)(nil),                          // 14: hstream.server.ShardOffset
	(*EchoRequest)(nil),                          // 15: hstream.server.EchoRequest
	(*EchoResponse)(nil),                         // 16: hstream.server.EchoResponse
	(*CommandStreamTask)(nil),                    // 17: hstream.server.CommandStreamTask
	(*CommandStreamTaskResponse)(nil),            // 18: hstream.server.CommandStreamTaskResponse
	(*CommandConnect)(nil),                       // 19: hstream.server.CommandConnect
	(*CommandConnected)(nil),                     // 20: hstream.server.CommandConnected
	(*CommandQuery)(nil),                         // 21: hstream.server.CommandQuery
	(*CommandQueryResponse)(nil),                 // 22: hstream.server.CommandQueryResponse
	(*GetStreamRequest)(nil),                     // 23: hstream.server.GetStreamRequest
	(*GetStreamResponse)(nil),                    // 24: hstream.server.GetStreamResponse
	(*AppendRequest)(nil),                        // 25: hstream.server.AppendRequest
	(*AppendResponse)(nil),                       // 26: hstream.server.AppendResponse
	(*Subscription)(nil),                         // 27: hstream.server.Subscription
	(*SubscriptionOffset)(nil),                   // 28: hstream.server.SubscriptionOffset
	(*GetSubscriptionRequest)(nil),               // 29: hstream.server.GetSubscriptionRequest
	(*GetSubscriptionResponse)(nil),              // 30: hstream.server.GetSubscriptionResponse
	(*DeleteSubscriptionRequest)(nil),            // 31: hstream.server.DeleteSubscriptionRequest
	(*CheckSubscriptionExistRequest)(nil),        // 32: hstream.server.CheckSubscriptionExistRequest
	(*CheckSubscriptionExistResponse)(nil),       // 33: hstream.server.CheckSubscriptionExistResponse
	(*StreamingFetchRequest)(nil),                // 34: hstream.server.StreamingFetchRequest
	(*StreamingFetchResponse)(nil),               // 35: hstream.server.StreamingFetchResponse
	(*ReceivedRecord)(nil),                       // 36: hstream.server.ReceivedRecord
	(*DeleteStreamRequest)(nil),                  // 37: hstream.server.DeleteStreamRequest
	(*ListStreamsResponse)(nil),                  // 38: hstream.server.ListStreamsResponse
	(*ListStreamsRequest)(nil),                   // 39: hstream.server.ListStreamsRequest
	(*ListStreamsWithPrefixRequest)(nil),         // 40: hstream.server.ListStreamsWithPrefixRequest
	(*ListSubscriptionsRequest)(nil),             // 41: hstream.server.ListSubscriptionsRequest
	(*ListSubscriptionsWithPrefixRequest)(nil),   // 42: hstream.server.ListSubscriptionsWithPrefixRequest
	(*ListSubscriptionsResponse)(nil),            // 43: hstream.server.ListSubscriptionsResponse
	(*ListConsumersRequest)(nil),                 // 44: hstream.server.ListConsumersRequest
	(*ListConsumersResponse)(nil),                // 45: hstream.server.ListConsumersResponse
	(*TrimStreamRequest)(nil),                    // 46: hstream.server.TrimStreamRequest
	(*TrimShardsRequest)(nil),                    // 47: hstream.server.TrimShardsRequest
	(*TrimShardsResponse)(nil),                   // 48: hstream.server.TrimShardsResponse
	(*Stream)(nil),                               // 49: hstream.server.Stream
	(*BatchedRecord)(nil),                        // 50: hstream.server.BatchedRecord
	(*HStreamRecord)(nil),                        // 51: hstream.server.HStreamRecord
	(*BatchHStreamRecords)(nil),                  // 52: hstream.server.BatchHStreamRecords
	(*HStreamRecordHeader)(nil),                  // 53: hstream.server.HStreamRecordHeader
	(*RecordId)(nil),                             // 54: hstream.server.RecordId
	(*Shard)(nil),                                // 55: hstream.server.Shard
	(*ListShardsRequest)(nil),                    // 56: hstream.server.ListShardsRequest
	(*ListShardsResponse)(nil),                   // 57: hstream.server.ListShardsResponse
	(*TrimShardRequest)(nil),                     // 58: hstream.server.TrimShardRequest
	(*CreateShardReaderRequest)(nil),             // 59: hstream.server.CreateShardReaderRequest
	(*CreateShardReaderResponse)(nil),            // 60: hstream.server.CreateShardReaderResponse
	(*ReadShardRequest)(nil),                     // 61: hstream.server.ReadShardRequest
	(*DeleteShardReaderRequest)(nil),             // 62: hstream.server.DeleteShardReaderRequest
	(*ReadShardResponse)(nil),                    // 63: hstream.server.ReadShardResponse
	(*ListShardReadersRequest)(nil),              // 64: hstream.server.ListShardReadersRequest
	(*ListShardReadersResponse)(nil),             // 65: hstream.server.ListShardReadersResponse
	(*ReadShardStreamRequest)(nil),               // 66: hstream.server.ReadShardStreamRequest
	(*ReadShardStreamResponse)(nil),              // 67: hstream.server.ReadShardStreamResponse
	(*StreamOffset)(nil),                         // 68: hstream.server.StreamOffset
	(*ReadStreamRequest)(nil),                    // 69: hstream.server.ReadStreamRequest
	(*ReadStreamResponse)(nil),                   // 70: hstream.server.ReadStreamResponse
	(*ReadStreamByKeyRequest)(nil),               // 71: hstream.server.ReadStreamByKeyRequest
	(*ReadStreamByKeyResponse)(nil),              // 72: hstream.server.ReadStreamByKeyResponse
	(*ReadSingleShardStreamRequest)(nil),         // 73: hstream.server.ReadSingleShardStreamRequest
	(*ReadSingleShardStreamResponse)(nil),        // 74: hstream.server.ReadSingleShardStreamResponse
	(*TerminateQueryRequest)(nil),                // 75: hstream.server.TerminateQueryRequest
	(*CreateQueryRequest)(nil),                   // 76: hstream.server.CreateQueryRequest
	(*CreateQueryWithNamespaceRequest)(nil),      // 77: hstream.server.CreateQueryWithNamespaceRequest
	(*ListQueriesRequest)(nil),                   // 78: hstream.server.ListQueriesRequest
	(*ListQueriesResponse)(nil),                  // 79: hstream.server.ListQueriesResponse
	(*GetQueryRequest)(nil),                      // 80: hstream.server.GetQueryRequest
	(*Consumer)(nil),                             // 81: hstream.server.Consumer
	(*Query)(nil),                                // 82: hstream.server.Query
	(*DeleteQueryRequest)(nil),                   // 83: hstream.server.DeleteQueryRequest
	(*ResumeQueryRequest)(nil),                   // 84: hstream.server.ResumeQueryRequest
	(*PauseQueryRequest)(nil),                    // 85: hstream.server.PauseQueryRequest
	(*ParseSqlRequest)(nil),                      // 86: hstream.server.ParseSqlRequest
	(*ParseSqlResponse)(nil),                     // 87: hstream.server.ParseSqlResponse
	(*ColumnCatalog)(nil),                        // 88: hstream.server.ColumnCatalog
	(*Schema)(nil),                               // 89: hstream.server.Schema
	(*GetSchemaRequest)(nil),                     // 90: hstream.server.GetSchemaRequest
	(*UnregisterSchemaRequest)(nil),              // 91: hstream.server.UnregisterSchemaRequest
	(*ExecuteViewQuerySql)(nil),                  // 92: hstream.server.ExecuteViewQuerySql
	(*CreateConnectorRequest)(nil),               // 93: hstream.server.CreateConnectorRequest
	(*ListConnectorsRequest)(nil),                // 94: hstream.server.ListConnectorsRequest
	(*ListConnectorsResponse)(nil),               // 95: hstream.server.ListConnectorsResponse
	(*GetConnectorRequest)(nil),                  // 96: hstream.server.GetConnectorRequest
	(*GetConnectorSpecRequest)(nil),              // 97: hstream.server.GetConnectorSpecRequest
	(*GetConnectorSpecResponse)(nil),             // 98: hstream.server.GetConnectorSpecResponse
	(*GetConnectorLogsRequest)(nil),              // 99: hstream.server.GetConnectorLogsRequest
	(*GetConnectorLogsResponse)(nil),             // 100: hstream.server.GetConnectorLogsResponse
	(*Connector)(nil),                            // 101: hstream.server.Connector
	(*DeleteConnectorRequest)(nil),               // 102: hstream.server.DeleteConnectorRequest
	(*PauseConnectorRequest)(nil),                // 103: hstream.server.PauseConnectorRequest
	(*ResumeConnectorRequest)(nil),               // 104: hstream.server.ResumeConnectorRequest
	(*GetViewRequest)(nil),                       // 105: hstream.server.GetViewRequest
	(*DeleteViewRequest)(nil),                    // 106: hstream.server.DeleteViewRequest
	(*ListViewsRequest)(nil),                     // 107: hstream.server.ListViewsRequest
	(*ListViewsResponse)(nil),                    // 108: hstream.server.ListViewsResponse
	(*View)(nil),                                 // 109: hstream.server.View
	(*ExecuteViewQueryResponse)(nil),             // 110: hstream.server.ExecuteViewQueryResponse
	(*ExecuteViewQueryRequest)(nil),              // 111: hstream.server.ExecuteViewQueryRequest
	(*ExecuteViewQueryWithNamespaceRequest)(nil), // 112: hstream.server.ExecuteViewQueryWithNamespaceRequest
	(*StatsIntervalVals)(nil),                    // 113: hstream.server.StatsIntervalVals
	(*StatsDoubleVals)(nil),                      // 114: hstream.server.StatsDoubleVals
	(*AdminCommandRequest)(nil),                  // 115: hstream.server.AdminCommandRequest
	(*AdminCommandResponse)(nil),                 // 116: hstream.server.AdminCommandResponse
	(*PerStreamTimeSeriesStatsRequest)(nil),      // 117: hstream.server.PerStreamTimeSeriesStatsRequest
	(*PerStreamTimeSeriesStatsResponse)(nil),     // 118: hstream.server.PerStreamTimeSeriesStatsResponse
	(*PerStreamTimeSeriesStatsAllResponse)(nil),  // 119: hstream.server.PerStreamTimeSeriesStatsAllResponse
	(*PerStreamTimeSeriesStatsAllRequest)(nil),   // 120: hstream.server.PerStreamTimeSeriesStatsAllRequest
	(*DescribeClusterResponse)(nil),              // 121: hstream.server.DescribeClusterResponse
	(*ServerNode)(nil),                           // 122: hstream.server.ServerNode
	(*ServerNodeStatus)(nil),                     // 123: hstream.server.ServerNodeStatus
	(*HStreamVersion)(nil),                       // 124: hstream.server.HStreamVersion
	(*LookupShardRequest)(nil),                   // 125: hstream.server.LookupShardRequest
	(*LookupShardResponse)(nil),                  // 126: hstream.server.LookupShardResponse
	(*LookupSubscriptionRequest)(nil),            // 127: hstream.server.LookupSubscriptionRequest
	(*LookupSubscriptionResponse)(nil),           // 128: hstream.server.LookupSubscriptionResponse
	(*LookupShardReaderRequest)(nil),             // 129: hstream.server.LookupShardReaderRequest
	(*LookupShardReaderResponse)(nil),            // 130: hstream.server.LookupShardReaderResponse
	(*LookupResourceRequest)(nil),                // 131: hstream.server.LookupResourceRequest
	(*LookupKeyRequest)(nil),                     // 132: hstream.server.LookupKeyRequest
	(*GetTailRecordIdRequest)(nil),               // 133: hstream.server.GetTailRecordIdRequest
	(*GetTailRecordIdResponse)(nil),              // 134: hstream.server.GetTailRecordIdResponse
	(*StatType)(nil),                             // 135: hstream.server.StatType
	(*StatValue)(nil),                            // 136: hstream.server.StatValue
	(*StatError)(nil),                            // 137: hstream.server.StatError
	(*GetStatsRequest)(nil),                      // 138: hstream.server.GetStatsRequest
	(*GetStatsResponse)(nil),                     // 139: hstream.server.GetStatsResponse
	nil,                                          // 140: hstream.server.TrimShardsResponse.TrimPointsEntry
	nil,                                          // 141: hstream.server.HStreamRecordHeader.AttributesEntry
	nil,                                          // 142: hstream.server.PerStreamTimeSeriesStatsAllResponse.StatsEntry
	nil,                                          // 143: hstream.server.StatValue.StatValuesEntry
	(*structpb.Struct)(nil),                      // 144: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                // 145: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                        // 146: google.protobuf.Empty
}
var file_hstream_proto_depIdxs = []int32{
	0,   // 0: hstream.server.ShardOffset.specialOffset:type_name -> hstream.server.SpecialOffset
	54,  // 1: hstream.server.ShardOffset.recordOffset:type_name -> hstream.server.RecordId
	13,  // 2: hstream.server.ShardOffset.timestampOffset:type_name -> hstream.server.TimestampOffset
	144, // 3: hstream.server.CommandQueryResponse.result_set:type_name -> google.protobuf.Struct
	49,  // 4: hstream.server.GetStreamResponse.stream:type_name -> hstream.server.Stream
	50,  // 5: hstream.server.AppendRequest.records:type_name -> hstream.server.BatchedRecord
	54,  // 6: hstream.server.AppendResponse.recordIds:type_name -> hstream.server.RecordId
	0,   // 7: hstream.server.Subscription.offset:type_name -> hstream.server.SpecialOffset
	145, // 8: hstream.server.Subscription.creationTime:type_name -> google.protobuf.Timestamp
	27,  // 9: hstream.server.GetSubscriptionResponse.subscription:type_name -> hstream.server.Subscription
	28,  // 10: hstream.server.GetSubscriptionResponse.offsets:type_name -> hstream.server.SubscriptionOffset
	54,  // 11: hstream.server.StreamingFetchRequest.ackIds:type_name -> hstream.server.RecordId
	36,  // 12: hstream.server.StreamingFetchResponse.receivedRecords:type_name -> hstream.server.ReceivedRecord
	54,  // 13: hstream.server.ReceivedRecord.recordIds:type_name -> hstream.server.RecordId
	50,  // 14: hstream.server.ReceivedRecord.record:type_name -> hstream.server.BatchedRecord
	49,  // 15: hstream.server.ListStreamsResponse.streams:type_name -> hstream.server.Stream
	27,  // 16: hstream.server.ListSubscriptionsResponse.subscription:type_name -> hstream.server.Subscription
	81,  // 17: hstream.server.ListConsumersResponse.consumers:type_name -> hstream.server.Consumer
	68,  // 18: hstream.server.TrimStreamRequest.trimPoint:type_name -> hstream.server.StreamOffset
	140, // 19: hstream.server.TrimShardsResponse.trimPoints:type_name -> hstream.server.TrimShardsResponse.TrimPointsEntry
	145, // 20: hstream.server.Stream.creationTime:type_name -> google.protobuf.Timestamp
	1,   // 21: hstream.server.BatchedRecord.compressionType:type_name -> hstream.server.CompressionType
	145, // 22: hstream.server.BatchedRecord.publishTime:type_name -> google.protobuf.Timestamp
	53,  // 23: hstream.server.HStreamRecord.header:type_name -> hstream.server.HStreamRecordHeader
	51,  // 24: hstream.server.BatchHStreamRecords.records:type_name -> hstream.server.HStreamRecord
	12,  // 25: hstream.server.HStreamRecordHeader.flag:type_name -> hstream.server.HStreamRecordHeader.Flag
	141, // 26: hstream.server.HStreamRecordHeader.attributes:type_name -> hstream.server.HStreamRecordHeader.AttributesEntry
	55,  // 27: hstream.server.ListShardsResponse.shards:type_name -> hstream.server.Shard
	14,  // 28: hstream.server.TrimShardRequest.trimPoint:type_name -> hstream.server.ShardOffset
	14,  // 29: hstream.server.CreateShardReaderRequest.shardOffset:type_name -> hstream.server.ShardOffset
	14,  // 30: hstream.server.CreateShardReaderResponse.shardOffset:type_name -> hstream.server.ShardOffset
	36,  // 31: hstream.server.ReadShardResponse.receivedRecords:type_name -> hstream.server.ReceivedRecord
	14,  // 32: hstream.server.ReadShardStreamRequest.from:type_name -> hstream.server.ShardOffset
	14,  // 33: hstream.server.ReadShardStreamRequest.until:type_name -> hstream.server.ShardOffset
	36,  // 34: hstream.server.ReadShardStreamResponse.receivedRecords:type_name -> hstream.server.ReceivedRecord
	0,   // 35: hstream.server.StreamOffset.specialOffset:type_name -> hstream.server.SpecialOffset
	13,  // 36: hstream.server.StreamOffset.timestampOffset:type_name -> hstream.server.TimestampOffset
	68,  // 37: hstream.server.ReadStreamRequest.from:type_name -> hstream.server.StreamOffset
	68,  // 38: hstream.server.ReadStreamRequest.until:type_name -> hstream.server.StreamOffset
	36,  // 39: hstream.server.ReadStreamResponse.receivedRecords:type_name -> hstream.server.ReceivedRecord
	14,  // 40: hstream.server.ReadStreamByKeyRequest.from:type_name -> hstream.server.ShardOffset
	14,  // 41: hstream.server.ReadStreamByKeyRequest.until:type_name -> hstream.server.ShardOffset
	54,  // 42: hstream.server.ReadStreamByKeyResponse.recordIds:type_name -> hstream.server.RecordId
	51,  // 43: hstream.server.ReadStreamByKeyResponse.receivedRecords:type_name -> hstream.server.HStreamRecord
	14,  // 44: hstream.server.ReadSingleShardStreamRequest.from:type_name -> hstream.server.ShardOffset
	14,  // 45: hstream.server.ReadSingleShardStreamRequest.until:type_name -> hstream.server.ShardOffset
	36,  // 46: hstream.server.ReadSingleShardStreamResponse.receivedRecords:type_name -> hstream.server.ReceivedRecord
	82,  // 47: hstream.server.ListQueriesResponse.queries:type_name -> hstream.server.Query
	2,   // 48: hstream.server.Query.status:type_name -> hstream.server.TaskStatusPB
	3,   // 49: hstream.server.Query.type:type_name -> hstream.server.QueryType
	92,  // 50: hstream.server.ParseSqlResponse.evqSql:type_name -> hstream.server.ExecuteViewQuerySql
	88,  // 51: hstream.server.Schema.columns:type_name -> hstream.server.ColumnCatalog
	101, // 52: hstream.server.ListConnectorsResponse.connectors:type_name -> hstream.server.Connector
	145, // 53: hstream.server.Connector.creationTime:type_name -> google.protobuf.Timestamp
	144, // 54: hstream.server.Connector.offsets:type_name -> google.protobuf.Struct
	109, // 55: hstream.server.ListViewsResponse.views:type_name -> hstream.server.View
	2,   // 56: hstream.server.View.status:type_name -> hstream.server.TaskStatusPB
	144, // 57: hstream.server.ExecuteViewQueryResponse.results:type_name -> google.protobuf.Struct
	113, // 58: hstream.server.PerStreamTimeSeriesStatsRequest.intervals:type_name -> hstream.server.StatsIntervalVals
	114, // 59: hstream.server.PerStreamTimeSeriesStatsResponse.stats:type_name -> hstream.server.StatsDoubleVals
	142, // 60: hstream.server.PerStreamTimeSeriesStatsAllResponse.stats:type_name -> hstream.server.PerStreamTimeSeriesStatsAllResponse.StatsEntry
	113, // 61: hstream.server.PerStreamTimeSeriesStatsAllRequest.intervals:type_name -> hstream.server.StatsIntervalVals
	122, // 62: hstream.server.DescribeClusterResponse.serverNodes:type_name -> hstream.server.ServerNode
	123, // 63: hstream.server.DescribeClusterResponse.serverNodesStatus:type_name -> hstream.server.ServerNodeStatus
	124, // 64: hstream.server.ServerNode.version:type_name -> hstream.server.HStreamVersion
	122, // 65: hstream.server.ServerNodeStatus.node:type_name -> hstream.server.ServerNode
	4,   // 66: hstream.server.ServerNodeStatus.state:type_name -> hstream.server.NodeState
	122, // 67: hstream.server.LookupShardResponse.serverNode:type_name -> hstream.server.ServerNode
	122, // 68: hstream.server.LookupSubscriptionResponse.serverNode:type_name -> hstream.server.ServerNode
	122, // 69: hstream.server.LookupShardReaderResponse.serverNode:type_name -> hstream.server.ServerNode
	5,   // 70: hstream.server.LookupResourceRequest.resType:type_name -> hstream.server.ResourceType
	54,  // 71: hstream.server.GetTailRecordIdResponse.tailRecordId:type_name -> hstream.server.RecordId
	6,   // 72: hstream.server.StatType.streamStat:type_name -> hstream.server.StreamStats
	7,   // 73: hstream.server.StatType.subStat:type_name -> hstream.server.SubscriptionStats
	8,   // 74: hstream.server.StatType.connStat:type_name -> hstream.server.ConnectorStats
	9,   // 75: hstream.server.StatType.queryStat:type_name -> hstream.server.QueryStats
	10,  // 76: hstream.server.StatType.viewStat:type_name -> hstream.server.ViewStats
	135, // 77: hstream.server.StatValue.statType:type_name -> hstream.server.StatType
	143, // 78: hstream.server.StatValue.statValues:type_name -> hstream.server.StatValue.StatValuesEntry
	135, // 79: hstream.server.StatError.statType:type_name -> hstream.server.StatType
	135, // 80: hstream.server.GetStatsRequest.stats:type_name -> hstream.server.StatType
	136, // 81: hstream.server.GetStatsResponse.statsValues:type_name -> hstream.server.StatValue
	137, // 82: hstream.server.GetStatsResponse.errors:type_name -> hstream.server.StatError
	114, // 83: hstream.server.PerStreamTimeSeriesStatsAllResponse.StatsEntry.value:type_name -> hstream.server.StatsDoubleVals
	15,  // 84: hstream.server.HStreamApi.Echo:input_type -> hstream.server.EchoRequest
	49,  // 85: hstream.server.HStreamApi.CreateStream:input_type -> hstream.server.Stream
	37,  // 86: hstream.server.HStreamApi.DeleteStream:input_type -> hstream.server.DeleteStreamRequest
	46,  // 87: hstream.server.HStreamApi.TrimStream:input_type -> hstream.server.TrimStreamRequest
	47,  // 88: hstream.server.HStreamApi.TrimShards:input_type -> hstream.server.TrimShardsRequest
	23,  // 89: hstream.server.HStreamApi.GetStream:input_type -> hstream.server.GetStreamRequest
	39,  // 90: hstream.server.HStreamApi.ListStreams:input_type -> hstream.server.ListStreamsRequest
	40,  // 91: hstream.server.HStreamApi.ListStreamsWithPrefix:input_type -> hstream.server.ListStreamsWithPrefixRequest
	125, // 92: hstream.server.HStreamApi.LookupShard:input_type -> hstream.server.LookupShardRequest
	25,  // 93: hstream.server.HStreamApi.Append:input_type -> hstream.server.AppendRequest
	133, // 94: hstream.server.HStreamApi.GetTailRecordId:input_type -> hstream.server.GetTailRecordIdRequest
	56,  // 95: hstream.server.HStreamApi.ListShards:input_type -> hstream.server.ListShardsRequest
	58,  // 96: hstream.server.HStreamApi.TrimShard:input_type -> hstream.server.TrimShardRequest
	59,  // 97: hstream.server.HStreamApi.CreateShardReader:input_type -> hstream.server.CreateShardReaderRequest
	129, // 98: hstream.server.HStreamApi.LookupShardReader:input_type -> hstream.server.LookupShardReaderRequest
	61,  // 99: hstream.server.HStreamApi.ReadShard:input_type -> hstream.server.ReadShardRequest
	66,  // 100: hstream.server.HStreamApi.ReadShardStream:input_type -> hstream.server.ReadShardStreamRequest
	64,  // 101: hstream.server.HStreamApi.ListShardReaders:input_type -> hstream.server.ListShardReadersRequest
	62,  // 102: hstream.server.HStreamApi.DeleteShardReader:input_type -> hstream.server.DeleteShardReaderRequest
	69,  // 103: hstream.server.HStreamApi.ReadStream:input_type -> hstream.server.ReadStreamRequest
	73,  // 104: hstream.server.HStreamApi.ReadSingleShardStream:input_type -> hstream.server.ReadSingleShardStreamRequest
	71,  // 105: hstream.server.HStreamApi.ReadStreamByKey:input_type -> hstream.server.ReadStreamByKeyRequest
	27,  // 106: hstream.server.HStreamApi.CreateSubscription:input_type -> hstream.server.Subscription
	29,  // 107: hstream.server.HStreamApi.GetSubscription:input_type -> hstream.server.GetSubscriptionRequest
	41,  // 108: hstream.server.HStreamApi.ListSubscriptions:input_type -> hstream.server.ListSubscriptionsRequest
	42,  // 109: hstream.server.HStreamApi.ListSubscriptionsWithPrefix:input_type -> hstream.server.ListSubscriptionsWithPrefixRequest
	44,  // 110: hstream.server.HStreamApi.ListConsumers:input_type -> hstream.server.ListConsumersRequest
	32,  // 111: hstream.server.HStreamApi.CheckSubscriptionExist:input_type -> hstream.server.CheckSubscriptionExistRequest
	31,  // 112: hstream.server.HStreamApi.DeleteSubscription:input_type -> hstream.server.DeleteSubscriptionRequest
	127, // 113: hstream.server.HStreamApi.LookupSubscription:input_type -> hstream.server.LookupSubscriptionRequest
	34,  // 114: hstream.server.HStreamApi.StreamingFetch:input_type -> hstream.server.StreamingFetchRequest
	146, // 115: hstream.server.HStreamApi.DescribeCluster:input_type -> google.protobuf.Empty
	131, // 116: hstream.server.HStreamApi.LookupResource:input_type -> hstream.server.LookupResourceRequest
	132, // 117: hstream.server.HStreamApi.LookupKey:input_type -> hstream.server.LookupKeyRequest
	115, // 118: hstream.server.HStreamApi.SendAdminCommand:input_type -> hstream.server.AdminCommandRequest
	117, // 119: hstream.server.HStreamApi.PerStreamTimeSeriesStats:input_type -> hstream.server.PerStreamTimeSeriesStatsRequest
	120, // 120: hstream.server.HStreamApi.PerStreamTimeSeriesStatsAll:input_type -> hstream.server.PerStreamTimeSeriesStatsAllRequest
	138, // 121: hstream.server.HStreamApi.GetStats:input_type -> hstream.server.GetStatsRequest
	21,  // 122: hstream.server.HStreamApi.ExecuteQuery:input_type -> hstream.server.CommandQuery
	76,  // 123: hstream.server.HStreamApi.CreateQuery:input_type -> hstream.server.CreateQueryRequest
	77,  // 124: hstream.server.HStreamApi.CreateQueryWithNamespace:input_type -> hstream.server.CreateQueryWithNamespaceRequest
	78,  // 125: hstream.server.HStreamApi.ListQueries:input_type -> hstream.server.ListQueriesRequest
	80,  // 126: hstream.server.HStreamApi.GetQuery:input_type -> hstream.server.GetQueryRequest
	75,  // 127: hstream.server.HStreamApi.TerminateQuery:input_type -> hstream.server.TerminateQueryRequest
	83,  // 128: hstream.server.HStreamApi.DeleteQuery:input_type -> hstream.server.DeleteQueryRequest
	84,  // 129: hstream.server.HStreamApi.ResumeQuery:input_type -> hstream.server.ResumeQueryRequest
	85,  // 130: hstream.server.HStreamApi.PauseQuery:input_type -> hstream.server.PauseQueryRequest
	86,  // 131: hstream.server.HStreamApi.ParseSql:input_type -> hstream.server.ParseSqlRequest
	89,  // 132: hstream.server.HStreamApi.RegisterSchema:input_type -> hstream.server.Schema
	90,  // 133: hstream.server.HStreamApi.GetSchema:input_type -> hstream.server.GetSchemaRequest
	91,  // 134: hstream.server.HStreamApi.UnregisterSchema:input_type -> hstream.server.UnregisterSchemaRequest
	93,  // 135: hstream.server.HStreamApi.CreateConnector:input_type -> hstream.server.CreateConnectorRequest
	94,  // 136: hstream.server.HStreamApi.ListConnectors:input_type -> hstream.server.ListConnectorsRequest
	96,  // 137: hstream.server.HStreamApi.GetConnector:input_type -> hstream.server.GetConnectorRequest
	97,  // 138: hstream.server.HStreamApi.GetConnectorSpec:input_type -> hstream.server.GetConnectorSpecRequest
	99,  // 139: hstream.server.HStreamApi.GetConnectorLogs:input_type -> hstream.server.GetConnectorLogsRequest
	102, // 140: hstream.server.HStreamApi.DeleteConnector:input_type -> hstream.server.DeleteConnectorRequest
	103, // 141: hstream.server.HStreamApi.PauseConnector:input_type -> hstream.server.PauseConnectorRequest
	104, // 142: hstream.server.HStreamApi.ResumeConnector:input_type -> hstream.server.ResumeConnectorRequest
	107, // 143: hstream.server.HStreamApi.ListViews:input_type -> hstream.server.ListViewsRequest
	105, // 144: hstream.server.HStreamApi.GetView:input_type -> hstream.server.GetViewRequest
	106, // 145: hstream.server.HStreamApi.DeleteView:input_type -> hstream.server.DeleteViewRequest
	111, // 146: hstream.server.HStreamApi.ExecuteViewQuery:input_type -> hstream.server.ExecuteViewQueryRequest
	112, // 147: hstream.server.HStreamApi.ExecuteViewQueryWithNamespace:input_type -> hstream.server.ExecuteViewQueryWithNamespaceRequest
	16,  // 148: hstream.server.HStreamApi.Echo:output_type -> hstream.server.EchoResponse
	49,  // 149: hstream.server.HStreamApi.CreateStream:output_type -> hstream.server.Stream
	146, // 150: hstream.server.HStreamApi.DeleteStream:output_type -> google.protobuf.Empty
	146, // 151: hstream.server.HStreamApi.TrimStream:output_type -> google.protobuf.Empty
	48,  // 152: hstream.server.HStreamApi.TrimShards:output_type -> hstream.server.TrimShardsResponse
	24,  // 153: hstream.server.HStreamApi.GetStream:output_type -> hstream.server.GetStreamResponse
	38,  // 154: hstream.server.HStreamApi.ListStreams:output_type -> hstream.server.ListStreamsResponse
	38,  // 155: hstream.server.HStreamApi.ListStreamsWithPrefix:output_type -> hstream.server.ListStreamsResponse
	126, // 156: hstream.server.HStreamApi.LookupShard:output_type -> hstream.server.LookupShardResponse
	26,  // 157: hstream.server.HStreamApi.Append:output_type -> hstream.server.AppendResponse
	134, // 158: hstream.server.HStreamApi.GetTailRecordId:output_type -> hstream.server.GetTailRecordIdResponse
	57,  // 159: hstream.server.HStreamApi.ListShards:output_type -> hstream.server.ListShardsResponse
	146, // 160: hstream.server.HStreamApi.TrimShard:output_type -> google.protobuf.Empty
	60,  // 161: hstream.server.HStreamApi.CreateShardReader:output_type -> hstream.server.CreateShardReaderResponse
	130, // 162: hstream.server.HStreamApi.LookupShardReader:output_type -> hstream.server.LookupShardReaderResponse
	63,  // 163: hstream.server.HStreamApi.ReadShard:output_type -> hstream.server.ReadShardResponse
	67,  // 164: hstream.server.HStreamApi.ReadShardStream:output_type -> hstream.server.ReadShardStreamResponse
	65,  // 165: hstream.server.HStreamApi.ListShardReaders:output_type -> hstream.server.ListShardReadersResponse
	146, // 166: hstream.server.HStreamApi.DeleteShardReader:output_type -> google.protobuf.Empty
	70,  // 167: hstream.server.HStreamApi.ReadStream:output_type -> hstream.server.ReadStreamResponse
	74,  // 168: hstream.server.HStreamApi.ReadSingleShardStream:output_type -> hstream.server.ReadSingleShardStreamResponse
	72,  // 169: hstream.server.HStreamApi.ReadStreamByKey:output_type -> hstream.server.ReadStreamByKeyResponse
	27,  // 170: hstream.server.HStreamApi.CreateSubscription:output_type -> hstream.server.Subscription
	30,  // 171: hstream.server.HStreamApi.GetSubscription:output_type -> hstream.server.GetSubscriptionResponse
	43,  // 172: hstream.server.HStreamApi.ListSubscriptions:output_type -> hstream.server.ListSubscriptionsResponse
	43,  // 173: hstream.server.HStreamApi.ListSubscriptionsWithPrefix:output_type -> hstream.server.ListSubscriptionsResponse
	45,  // 174: hstream.server.HStreamApi.ListConsumers:output_type -> hstream.server.ListConsumersResponse
	33,  // 175: hstream.server.HStreamApi.CheckSubscriptionExist:output_type -> hstream.server.CheckSubscriptionExistResponse
	146, // 176: hstream.server.HStreamApi.DeleteSubscription:output_type -> google.protobuf.Empty
	128, // 177: hstream.server.HStreamApi.LookupSubscription:output_type -> hstream.server.LookupSubscriptionResponse
	35,  // 178: hstream.server.HStreamApi.StreamingFetch:output_type -> hstream.server.StreamingFetchResponse
	121, // 179: hstream.server.HStreamApi.DescribeCluster:output_type -> hstream.server.DescribeClusterResponse
	122, // 180: hstream.server.HStreamApi.LookupResource:output_type -> hstream.server.ServerNode
	122, // 181: hstream.server.HStreamApi.LookupKey:output_type -> hstream.server.ServerNode
	116, // 182: hstream.server.HStreamApi.SendAdminCommand:output_type -> hstream.server.AdminCommandResponse
	118, // 183: hstream.server.HStreamApi.PerStreamTimeSeriesStats:output_type -> hstream.server.PerStreamTimeSeriesStatsResponse
	119, // 184: hstream.server.HStreamApi.PerStreamTimeSeriesStatsAll:output_type -> hstream.server.PerStreamTimeSeriesStatsAllResponse
	139, // 185: hstream.server.HStreamApi.GetStats:output_type -> hstream.server.GetStatsResponse
	22,  // 186: hstream.server.HStreamApi.ExecuteQuery:output_type -> hstream.server.CommandQueryResponse
	82,  // 187: hstream.server.HStreamApi.CreateQuery:output_type -> hstream.server.Query
	82,  // 188: hstream.server.HStreamApi.CreateQueryWithNamespace:output_type -> hstream.server.Query
	79,  // 189: hstream.server.HStreamApi.ListQueries:output_type -> hstream.server.ListQueriesResponse
	82,  // 190: hstream.server.HStreamApi.GetQuery:output_type -> hstream.server.Query
	146, // 191: hstream.server.HStreamApi.TerminateQuery:output_type -> google.protobuf.Empty
	146, // 192: hstream.server.HStreamApi.DeleteQuery:output_type -> google.protobuf.Empty
	146, // 193: hstream.server.HStreamApi.ResumeQuery:output_type -> google.protobuf.Empty
	146, // 194: hstream.server.HStreamApi.PauseQuery:output_type -> google.protobuf.Empty
	87,  // 195: hstream.server.HStreamApi.ParseSql:output_type -> hstream.server.ParseSqlResponse
	146, // 196: hstream.server.HStreamApi.RegisterSchema:output_type -> google.protobuf.Empty
	89,  // 197: hstream.server.HStreamApi.GetSchema:output_type -> hstream.server.Schema
	146, // 198: hstream.server.HStreamApi.UnregisterSchema:output_type -> google.protobuf.Empty
	101, // 199: hstream.server.HStreamApi.CreateConnector:output_type -> hstream.server.Connector
	95,  // 200: hstream.server.HStreamApi.ListConnectors:output_type -> hstream.server.ListConnectorsResponse
	101, // 201: hstream.server.HStreamApi.GetConnector:output_type -> hstream.server.Connector
	98,  // 202: hstream.server.HStreamApi.GetConnectorSpec:output_type -> hstream.server.GetConnectorSpecResponse
	100, // 203: hstream.server.HStreamApi.GetConnectorLogs:output_type -> hstream.server.GetConnectorLogsResponse
	146, // 204: hstream.server.HStreamApi.DeleteConnector:output_type -> google.protobuf.Empty
	146, // 205: hstream.server.HStreamApi.PauseConnector:output_type -> google.protobuf.Empty
	146, // 206: hstream.server.HStreamApi.ResumeConnector:output_type -> google.protobuf.Empty
	108, // 207: hstream.server.HStreamApi.ListViews:output_type -> hstream.server.ListViewsResponse
	109, // 208: hstream.server.HStreamApi.GetView:output_type -> hstream.server.View
	146, // 209: hstream.server.HStreamApi.DeleteView:output_type -> google.protobuf.Empty
	110, // 210: hstream.server.HStreamApi.ExecuteViewQuery:output_type -> hstream.server.ExecuteViewQueryResponse
	110, // 211: hstream.server.HStreamApi.ExecuteViewQueryWithNamespace:output_type -> hstream.server.ExecuteViewQueryResponse
	148, // [148:212] is the sub-list for method output_type
	84,  // [84:148] is the sub-list for method input_type
	84,  // [84:84] is the sub-list for extension type_name
	84,  // [84:84] is the sub-list for extension extendee
	0,   // [0:84] is the sub-list for field type_name
}

func init() { file_hstream_proto_init() }
func file_hstream_proto_init() {
	if File_hstream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandStreamTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandStreamTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSubscriptionExistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSubscriptionExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingFetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingFetchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamsWithPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubscriptionsWithPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsumersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsumersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrimStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrimShardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrimShardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchedRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HStreamRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchHStreamRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HStreamRecordHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrimShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShardReaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShardReaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteShardReaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShardReadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShardReadersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadShardStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadShardStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadStreamByKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadStreamByKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadSingleShardStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadSingleShardStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryWithNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseSqlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseSqlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnCatalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteViewQuerySql); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectorSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectorSpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectorLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectorLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListViewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListViewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteViewQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteViewQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteViewQueryWithNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsIntervalVals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsDoubleVals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerStreamTimeSeriesStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerStreamTimeSeriesStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerStreamTimeSeriesStatsAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerStreamTimeSeriesStatsAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HStreamVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupShardReaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupShardReaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTailRecordIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTailRecordIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hstream_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hstream_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ShardOffset_SpecialOffset)(nil),
		(*ShardOffset_RecordOffset)(nil),
		(*ShardOffset_TimestampOffset)(nil),
	}
	file_hstream_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*StreamOffset_SpecialOffset)(nil),
		(*StreamOffset_TimestampOffset)(nil),
	}
	file_hstream_proto_msgTypes[74].OneofWrappers = []interface{}{
		(*ParseSqlResponse_EvqSql)(nil),
	}
	file_hstream_proto_msgTypes[122].OneofWrappers = []interface{}{
		(*StatType_StreamStat)(nil),
		(*StatType_SubStat)(nil),
		(*StatType_ConnStat)(nil),
		(*StatType_QueryStat)(nil),
		(*StatType_ViewStat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hstream_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   131,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hstream_proto_goTypes,
		DependencyIndexes: file_hstream_proto_depIdxs,
		EnumInfos:         file_hstream_proto_enumTypes,
		MessageInfos:      file_hstream_proto_msgTypes,
	}.Build()
	File_hstream_proto = out.File
	file_hstream_proto_rawDesc = nil
	file_hstream_proto_goTypes = nil
	file_hstream_proto_depIdxs = nil
}
