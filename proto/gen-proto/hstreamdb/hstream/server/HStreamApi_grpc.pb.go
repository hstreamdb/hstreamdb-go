// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: HStreamApi.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HStreamApiClient is the client API for HStreamApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HStreamApiClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Stream APIs
	CreateStream(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*Stream, error)
	DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error)
	LookupStream(ctx context.Context, in *LookupStreamRequest, opts ...grpc.CallOption) (*LookupStreamResponse, error)
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	Append0(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	// Create a stream with a select query, so the data generated by this select query will be
	// inserted to the stream automatically. Apart from this, the stream are the same with any
	// other streams, you can still use all the stream rpc APIs above.
	CreateQueryStream(ctx context.Context, in *CreateQueryStreamRequest, opts ...grpc.CallOption) (*CreateQueryStreamResponse, error)
	// Subscribe APIs
	CreateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error)
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	CheckSubscriptionExist(ctx context.Context, in *CheckSubscriptionExistRequest, opts ...grpc.CallOption) (*CheckSubscriptionExistResponse, error)
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LookupSubscription(ctx context.Context, in *LookupSubscriptionRequest, opts ...grpc.CallOption) (*LookupSubscriptionResponse, error)
	LookupSubscriptionWithOrderingKey(ctx context.Context, in *LookupSubscriptionWithOrderingKeyRequest, opts ...grpc.CallOption) (*LookupSubscriptionWithOrderingKeyResponse, error)
	WatchSubscription(ctx context.Context, in *WatchSubscriptionRequest, opts ...grpc.CallOption) (HStreamApi_WatchSubscriptionClient, error)
	StreamingFetch(ctx context.Context, opts ...grpc.CallOption) (HStreamApi_StreamingFetchClient, error)
	// Cluster APIs
	DescribeCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DescribeClusterResponse, error)
	// Stats
	PerStreamTimeSeriesStats(ctx context.Context, in *PerStreamTimeSeriesStatsRequest, opts ...grpc.CallOption) (*PerStreamTimeSeriesStatsResponse, error)
	PerStreamTimeSeriesStatsAll(ctx context.Context, in *PerStreamTimeSeriesStatsAllRequest, opts ...grpc.CallOption) (*PerStreamTimeSeriesStatsAllResponse, error)
	// Admin Command
	SendAdminCommand(ctx context.Context, in *AdminCommandRequest, opts ...grpc.CallOption) (*AdminCommandResponse, error)
	// only for push query
	// e.g., select (with emit changes)
	ExecutePushQuery(ctx context.Context, in *CommandPushQuery, opts ...grpc.CallOption) (HStreamApi_ExecutePushQueryClient, error)
	// for execute any sql stmt except push query,
	// e.g., insert, create, show/list, select(without emit changes) ...
	ExecuteQuery(ctx context.Context, in *CommandQuery, opts ...grpc.CallOption) (*CommandQueryResponse, error)
	// query related apis
	CreateQuery(ctx context.Context, in *CreateQueryRequest, opts ...grpc.CallOption) (*Query, error)
	ListQueries(ctx context.Context, in *ListQueriesRequest, opts ...grpc.CallOption) (*ListQueriesResponse, error)
	GetQuery(ctx context.Context, in *GetQueryRequest, opts ...grpc.CallOption) (*Query, error)
	TerminateQueries(ctx context.Context, in *TerminateQueriesRequest, opts ...grpc.CallOption) (*TerminateQueriesResponse, error)
	DeleteQuery(ctx context.Context, in *DeleteQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RestartQuery(ctx context.Context, in *RestartQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// connector related apis
	CreateSinkConnector(ctx context.Context, in *CreateSinkConnectorRequest, opts ...grpc.CallOption) (*Connector, error)
	ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error)
	GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*Connector, error)
	DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RestartConnector(ctx context.Context, in *RestartConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TerminateConnector(ctx context.Context, in *TerminateConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// view related apis
	CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*View, error)
	ListViews(ctx context.Context, in *ListViewsRequest, opts ...grpc.CallOption) (*ListViewsResponse, error)
	GetView(ctx context.Context, in *GetViewRequest, opts ...grpc.CallOption) (*View, error)
	DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// FIXME: (store)node related apis
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error)
}

type hStreamApiClient struct {
	cc grpc.ClientConnInterface
}

func NewHStreamApiClient(cc grpc.ClientConnInterface) HStreamApiClient {
	return &hStreamApiClient{cc}
}

func (c *hStreamApiClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateStream(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*Stream, error) {
	out := new(Stream)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/DeleteStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error) {
	out := new(ListStreamsResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/ListStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) LookupStream(ctx context.Context, in *LookupStreamRequest, opts ...grpc.CallOption) (*LookupStreamResponse, error) {
	out := new(LookupStreamResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/LookupStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) Append0(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/Append0", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateQueryStream(ctx context.Context, in *CreateQueryStreamRequest, opts ...grpc.CallOption) (*CreateQueryStreamResponse, error) {
	out := new(CreateQueryStreamResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/CreateQueryStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CheckSubscriptionExist(ctx context.Context, in *CheckSubscriptionExistRequest, opts ...grpc.CallOption) (*CheckSubscriptionExistResponse, error) {
	out := new(CheckSubscriptionExistResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/CheckSubscriptionExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) LookupSubscription(ctx context.Context, in *LookupSubscriptionRequest, opts ...grpc.CallOption) (*LookupSubscriptionResponse, error) {
	out := new(LookupSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/LookupSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) LookupSubscriptionWithOrderingKey(ctx context.Context, in *LookupSubscriptionWithOrderingKeyRequest, opts ...grpc.CallOption) (*LookupSubscriptionWithOrderingKeyResponse, error) {
	out := new(LookupSubscriptionWithOrderingKeyResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/LookupSubscriptionWithOrderingKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) WatchSubscription(ctx context.Context, in *WatchSubscriptionRequest, opts ...grpc.CallOption) (HStreamApi_WatchSubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &HStreamApi_ServiceDesc.Streams[0], "/hstream.server.HStreamApi/WatchSubscription", opts...)
	if err != nil {
		return nil, err
	}
	x := &hStreamApiWatchSubscriptionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HStreamApi_WatchSubscriptionClient interface {
	Recv() (*WatchSubscriptionResponse, error)
	grpc.ClientStream
}

type hStreamApiWatchSubscriptionClient struct {
	grpc.ClientStream
}

func (x *hStreamApiWatchSubscriptionClient) Recv() (*WatchSubscriptionResponse, error) {
	m := new(WatchSubscriptionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hStreamApiClient) StreamingFetch(ctx context.Context, opts ...grpc.CallOption) (HStreamApi_StreamingFetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &HStreamApi_ServiceDesc.Streams[1], "/hstream.server.HStreamApi/StreamingFetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &hStreamApiStreamingFetchClient{stream}
	return x, nil
}

type HStreamApi_StreamingFetchClient interface {
	Send(*StreamingFetchRequest) error
	Recv() (*StreamingFetchResponse, error)
	grpc.ClientStream
}

type hStreamApiStreamingFetchClient struct {
	grpc.ClientStream
}

func (x *hStreamApiStreamingFetchClient) Send(m *StreamingFetchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hStreamApiStreamingFetchClient) Recv() (*StreamingFetchResponse, error) {
	m := new(StreamingFetchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hStreamApiClient) DescribeCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DescribeClusterResponse, error) {
	out := new(DescribeClusterResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/DescribeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) PerStreamTimeSeriesStats(ctx context.Context, in *PerStreamTimeSeriesStatsRequest, opts ...grpc.CallOption) (*PerStreamTimeSeriesStatsResponse, error) {
	out := new(PerStreamTimeSeriesStatsResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/PerStreamTimeSeriesStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) PerStreamTimeSeriesStatsAll(ctx context.Context, in *PerStreamTimeSeriesStatsAllRequest, opts ...grpc.CallOption) (*PerStreamTimeSeriesStatsAllResponse, error) {
	out := new(PerStreamTimeSeriesStatsAllResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/PerStreamTimeSeriesStatsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) SendAdminCommand(ctx context.Context, in *AdminCommandRequest, opts ...grpc.CallOption) (*AdminCommandResponse, error) {
	out := new(AdminCommandResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/SendAdminCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ExecutePushQuery(ctx context.Context, in *CommandPushQuery, opts ...grpc.CallOption) (HStreamApi_ExecutePushQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &HStreamApi_ServiceDesc.Streams[2], "/hstream.server.HStreamApi/ExecutePushQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &hStreamApiExecutePushQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HStreamApi_ExecutePushQueryClient interface {
	Recv() (*structpb.Struct, error)
	grpc.ClientStream
}

type hStreamApiExecutePushQueryClient struct {
	grpc.ClientStream
}

func (x *hStreamApiExecutePushQueryClient) Recv() (*structpb.Struct, error) {
	m := new(structpb.Struct)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hStreamApiClient) ExecuteQuery(ctx context.Context, in *CommandQuery, opts ...grpc.CallOption) (*CommandQueryResponse, error) {
	out := new(CommandQueryResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/ExecuteQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateQuery(ctx context.Context, in *CreateQueryRequest, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/CreateQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListQueries(ctx context.Context, in *ListQueriesRequest, opts ...grpc.CallOption) (*ListQueriesResponse, error) {
	out := new(ListQueriesResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/ListQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetQuery(ctx context.Context, in *GetQueryRequest, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/GetQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) TerminateQueries(ctx context.Context, in *TerminateQueriesRequest, opts ...grpc.CallOption) (*TerminateQueriesResponse, error) {
	out := new(TerminateQueriesResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/TerminateQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteQuery(ctx context.Context, in *DeleteQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/DeleteQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) RestartQuery(ctx context.Context, in *RestartQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/RestartQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateSinkConnector(ctx context.Context, in *CreateSinkConnectorRequest, opts ...grpc.CallOption) (*Connector, error) {
	out := new(Connector)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/CreateSinkConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error) {
	out := new(ListConnectorsResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/ListConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*Connector, error) {
	out := new(Connector)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/GetConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/DeleteConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) RestartConnector(ctx context.Context, in *RestartConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/RestartConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) TerminateConnector(ctx context.Context, in *TerminateConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/TerminateConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*View, error) {
	out := new(View)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/CreateView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListViews(ctx context.Context, in *ListViewsRequest, opts ...grpc.CallOption) (*ListViewsResponse, error) {
	out := new(ListViewsResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/ListViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetView(ctx context.Context, in *GetViewRequest, opts ...grpc.CallOption) (*View, error) {
	out := new(View)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/GetView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/DeleteView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamApi/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HStreamApiServer is the server API for HStreamApi service.
// All implementations must embed UnimplementedHStreamApiServer
// for forward compatibility
type HStreamApiServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Stream APIs
	CreateStream(context.Context, *Stream) (*Stream, error)
	DeleteStream(context.Context, *DeleteStreamRequest) (*emptypb.Empty, error)
	ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error)
	LookupStream(context.Context, *LookupStreamRequest) (*LookupStreamResponse, error)
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	Append0(context.Context, *AppendRequest) (*AppendResponse, error)
	// Create a stream with a select query, so the data generated by this select query will be
	// inserted to the stream automatically. Apart from this, the stream are the same with any
	// other streams, you can still use all the stream rpc APIs above.
	CreateQueryStream(context.Context, *CreateQueryStreamRequest) (*CreateQueryStreamResponse, error)
	// Subscribe APIs
	CreateSubscription(context.Context, *Subscription) (*Subscription, error)
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	CheckSubscriptionExist(context.Context, *CheckSubscriptionExistRequest) (*CheckSubscriptionExistResponse, error)
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*emptypb.Empty, error)
	LookupSubscription(context.Context, *LookupSubscriptionRequest) (*LookupSubscriptionResponse, error)
	LookupSubscriptionWithOrderingKey(context.Context, *LookupSubscriptionWithOrderingKeyRequest) (*LookupSubscriptionWithOrderingKeyResponse, error)
	WatchSubscription(*WatchSubscriptionRequest, HStreamApi_WatchSubscriptionServer) error
	StreamingFetch(HStreamApi_StreamingFetchServer) error
	// Cluster APIs
	DescribeCluster(context.Context, *emptypb.Empty) (*DescribeClusterResponse, error)
	// Stats
	PerStreamTimeSeriesStats(context.Context, *PerStreamTimeSeriesStatsRequest) (*PerStreamTimeSeriesStatsResponse, error)
	PerStreamTimeSeriesStatsAll(context.Context, *PerStreamTimeSeriesStatsAllRequest) (*PerStreamTimeSeriesStatsAllResponse, error)
	// Admin Command
	SendAdminCommand(context.Context, *AdminCommandRequest) (*AdminCommandResponse, error)
	// only for push query
	// e.g., select (with emit changes)
	ExecutePushQuery(*CommandPushQuery, HStreamApi_ExecutePushQueryServer) error
	// for execute any sql stmt except push query,
	// e.g., insert, create, show/list, select(without emit changes) ...
	ExecuteQuery(context.Context, *CommandQuery) (*CommandQueryResponse, error)
	// query related apis
	CreateQuery(context.Context, *CreateQueryRequest) (*Query, error)
	ListQueries(context.Context, *ListQueriesRequest) (*ListQueriesResponse, error)
	GetQuery(context.Context, *GetQueryRequest) (*Query, error)
	TerminateQueries(context.Context, *TerminateQueriesRequest) (*TerminateQueriesResponse, error)
	DeleteQuery(context.Context, *DeleteQueryRequest) (*emptypb.Empty, error)
	RestartQuery(context.Context, *RestartQueryRequest) (*emptypb.Empty, error)
	// connector related apis
	CreateSinkConnector(context.Context, *CreateSinkConnectorRequest) (*Connector, error)
	ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error)
	GetConnector(context.Context, *GetConnectorRequest) (*Connector, error)
	DeleteConnector(context.Context, *DeleteConnectorRequest) (*emptypb.Empty, error)
	RestartConnector(context.Context, *RestartConnectorRequest) (*emptypb.Empty, error)
	TerminateConnector(context.Context, *TerminateConnectorRequest) (*emptypb.Empty, error)
	// view related apis
	CreateView(context.Context, *CreateViewRequest) (*View, error)
	ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error)
	GetView(context.Context, *GetViewRequest) (*View, error)
	DeleteView(context.Context, *DeleteViewRequest) (*emptypb.Empty, error)
	// FIXME: (store)node related apis
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*Node, error)
	mustEmbedUnimplementedHStreamApiServer()
}

// UnimplementedHStreamApiServer must be embedded to have forward compatible implementations.
type UnimplementedHStreamApiServer struct {
}

func (UnimplementedHStreamApiServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedHStreamApiServer) CreateStream(context.Context, *Stream) (*Stream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedHStreamApiServer) DeleteStream(context.Context, *DeleteStreamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (UnimplementedHStreamApiServer) ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedHStreamApiServer) LookupStream(context.Context, *LookupStreamRequest) (*LookupStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupStream not implemented")
}
func (UnimplementedHStreamApiServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedHStreamApiServer) Append0(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append0 not implemented")
}
func (UnimplementedHStreamApiServer) CreateQueryStream(context.Context, *CreateQueryStreamRequest) (*CreateQueryStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueryStream not implemented")
}
func (UnimplementedHStreamApiServer) CreateSubscription(context.Context, *Subscription) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedHStreamApiServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedHStreamApiServer) CheckSubscriptionExist(context.Context, *CheckSubscriptionExistRequest) (*CheckSubscriptionExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSubscriptionExist not implemented")
}
func (UnimplementedHStreamApiServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedHStreamApiServer) LookupSubscription(context.Context, *LookupSubscriptionRequest) (*LookupSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupSubscription not implemented")
}
func (UnimplementedHStreamApiServer) LookupSubscriptionWithOrderingKey(context.Context, *LookupSubscriptionWithOrderingKeyRequest) (*LookupSubscriptionWithOrderingKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupSubscriptionWithOrderingKey not implemented")
}
func (UnimplementedHStreamApiServer) WatchSubscription(*WatchSubscriptionRequest, HStreamApi_WatchSubscriptionServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchSubscription not implemented")
}
func (UnimplementedHStreamApiServer) StreamingFetch(HStreamApi_StreamingFetchServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingFetch not implemented")
}
func (UnimplementedHStreamApiServer) DescribeCluster(context.Context, *emptypb.Empty) (*DescribeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCluster not implemented")
}
func (UnimplementedHStreamApiServer) PerStreamTimeSeriesStats(context.Context, *PerStreamTimeSeriesStatsRequest) (*PerStreamTimeSeriesStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerStreamTimeSeriesStats not implemented")
}
func (UnimplementedHStreamApiServer) PerStreamTimeSeriesStatsAll(context.Context, *PerStreamTimeSeriesStatsAllRequest) (*PerStreamTimeSeriesStatsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerStreamTimeSeriesStatsAll not implemented")
}
func (UnimplementedHStreamApiServer) SendAdminCommand(context.Context, *AdminCommandRequest) (*AdminCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAdminCommand not implemented")
}
func (UnimplementedHStreamApiServer) ExecutePushQuery(*CommandPushQuery, HStreamApi_ExecutePushQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecutePushQuery not implemented")
}
func (UnimplementedHStreamApiServer) ExecuteQuery(context.Context, *CommandQuery) (*CommandQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedHStreamApiServer) CreateQuery(context.Context, *CreateQueryRequest) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuery not implemented")
}
func (UnimplementedHStreamApiServer) ListQueries(context.Context, *ListQueriesRequest) (*ListQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueries not implemented")
}
func (UnimplementedHStreamApiServer) GetQuery(context.Context, *GetQueryRequest) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuery not implemented")
}
func (UnimplementedHStreamApiServer) TerminateQueries(context.Context, *TerminateQueriesRequest) (*TerminateQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateQueries not implemented")
}
func (UnimplementedHStreamApiServer) DeleteQuery(context.Context, *DeleteQueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuery not implemented")
}
func (UnimplementedHStreamApiServer) RestartQuery(context.Context, *RestartQueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartQuery not implemented")
}
func (UnimplementedHStreamApiServer) CreateSinkConnector(context.Context, *CreateSinkConnectorRequest) (*Connector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSinkConnector not implemented")
}
func (UnimplementedHStreamApiServer) ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectors not implemented")
}
func (UnimplementedHStreamApiServer) GetConnector(context.Context, *GetConnectorRequest) (*Connector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnector not implemented")
}
func (UnimplementedHStreamApiServer) DeleteConnector(context.Context, *DeleteConnectorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnector not implemented")
}
func (UnimplementedHStreamApiServer) RestartConnector(context.Context, *RestartConnectorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartConnector not implemented")
}
func (UnimplementedHStreamApiServer) TerminateConnector(context.Context, *TerminateConnectorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateConnector not implemented")
}
func (UnimplementedHStreamApiServer) CreateView(context.Context, *CreateViewRequest) (*View, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateView not implemented")
}
func (UnimplementedHStreamApiServer) ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViews not implemented")
}
func (UnimplementedHStreamApiServer) GetView(context.Context, *GetViewRequest) (*View, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetView not implemented")
}
func (UnimplementedHStreamApiServer) DeleteView(context.Context, *DeleteViewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteView not implemented")
}
func (UnimplementedHStreamApiServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedHStreamApiServer) GetNode(context.Context, *GetNodeRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedHStreamApiServer) mustEmbedUnimplementedHStreamApiServer() {}

// UnsafeHStreamApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HStreamApiServer will
// result in compilation errors.
type UnsafeHStreamApiServer interface {
	mustEmbedUnimplementedHStreamApiServer()
}

func RegisterHStreamApiServer(s grpc.ServiceRegistrar, srv HStreamApiServer) {
	s.RegisterService(&HStreamApi_ServiceDesc, srv)
}

func _HStreamApi_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateStream(ctx, req.(*Stream))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/DeleteStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteStream(ctx, req.(*DeleteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/ListStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListStreams(ctx, req.(*ListStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_LookupStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).LookupStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/LookupStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).LookupStream(ctx, req.(*LookupStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_Append0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).Append0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/Append0",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).Append0(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateQueryStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateQueryStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/CreateQueryStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateQueryStream(ctx, req.(*CreateQueryStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateSubscription(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CheckSubscriptionExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSubscriptionExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CheckSubscriptionExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/CheckSubscriptionExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CheckSubscriptionExist(ctx, req.(*CheckSubscriptionExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_LookupSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).LookupSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/LookupSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).LookupSubscription(ctx, req.(*LookupSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_LookupSubscriptionWithOrderingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSubscriptionWithOrderingKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).LookupSubscriptionWithOrderingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/LookupSubscriptionWithOrderingKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).LookupSubscriptionWithOrderingKey(ctx, req.(*LookupSubscriptionWithOrderingKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_WatchSubscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HStreamApiServer).WatchSubscription(m, &hStreamApiWatchSubscriptionServer{stream})
}

type HStreamApi_WatchSubscriptionServer interface {
	Send(*WatchSubscriptionResponse) error
	grpc.ServerStream
}

type hStreamApiWatchSubscriptionServer struct {
	grpc.ServerStream
}

func (x *hStreamApiWatchSubscriptionServer) Send(m *WatchSubscriptionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HStreamApi_StreamingFetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HStreamApiServer).StreamingFetch(&hStreamApiStreamingFetchServer{stream})
}

type HStreamApi_StreamingFetchServer interface {
	Send(*StreamingFetchResponse) error
	Recv() (*StreamingFetchRequest, error)
	grpc.ServerStream
}

type hStreamApiStreamingFetchServer struct {
	grpc.ServerStream
}

func (x *hStreamApiStreamingFetchServer) Send(m *StreamingFetchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hStreamApiStreamingFetchServer) Recv() (*StreamingFetchRequest, error) {
	m := new(StreamingFetchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HStreamApi_DescribeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DescribeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/DescribeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DescribeCluster(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_PerStreamTimeSeriesStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerStreamTimeSeriesStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).PerStreamTimeSeriesStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/PerStreamTimeSeriesStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).PerStreamTimeSeriesStats(ctx, req.(*PerStreamTimeSeriesStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_PerStreamTimeSeriesStatsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerStreamTimeSeriesStatsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).PerStreamTimeSeriesStatsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/PerStreamTimeSeriesStatsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).PerStreamTimeSeriesStatsAll(ctx, req.(*PerStreamTimeSeriesStatsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_SendAdminCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).SendAdminCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/SendAdminCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).SendAdminCommand(ctx, req.(*AdminCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ExecutePushQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandPushQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HStreamApiServer).ExecutePushQuery(m, &hStreamApiExecutePushQueryServer{stream})
}

type HStreamApi_ExecutePushQueryServer interface {
	Send(*structpb.Struct) error
	grpc.ServerStream
}

type hStreamApiExecutePushQueryServer struct {
	grpc.ServerStream
}

func (x *hStreamApiExecutePushQueryServer) Send(m *structpb.Struct) error {
	return x.ServerStream.SendMsg(m)
}

func _HStreamApi_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/ExecuteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ExecuteQuery(ctx, req.(*CommandQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/CreateQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateQuery(ctx, req.(*CreateQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/ListQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListQueries(ctx, req.(*ListQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/GetQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetQuery(ctx, req.(*GetQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_TerminateQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).TerminateQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/TerminateQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).TerminateQueries(ctx, req.(*TerminateQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/DeleteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteQuery(ctx, req.(*DeleteQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_RestartQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).RestartQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/RestartQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).RestartQuery(ctx, req.(*RestartQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateSinkConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSinkConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateSinkConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/CreateSinkConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateSinkConnector(ctx, req.(*CreateSinkConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/ListConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListConnectors(ctx, req.(*ListConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/GetConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetConnector(ctx, req.(*GetConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/DeleteConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteConnector(ctx, req.(*DeleteConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_RestartConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).RestartConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/RestartConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).RestartConnector(ctx, req.(*RestartConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_TerminateConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).TerminateConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/TerminateConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).TerminateConnector(ctx, req.(*TerminateConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/CreateView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateView(ctx, req.(*CreateViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/ListViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListViews(ctx, req.(*ListViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/GetView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetView(ctx, req.(*GetViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/DeleteView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteView(ctx, req.(*DeleteViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamApi/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HStreamApi_ServiceDesc is the grpc.ServiceDesc for HStreamApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HStreamApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hstream.server.HStreamApi",
	HandlerType: (*HStreamApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _HStreamApi_Echo_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _HStreamApi_CreateStream_Handler,
		},
		{
			MethodName: "DeleteStream",
			Handler:    _HStreamApi_DeleteStream_Handler,
		},
		{
			MethodName: "ListStreams",
			Handler:    _HStreamApi_ListStreams_Handler,
		},
		{
			MethodName: "LookupStream",
			Handler:    _HStreamApi_LookupStream_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _HStreamApi_Append_Handler,
		},
		{
			MethodName: "Append0",
			Handler:    _HStreamApi_Append0_Handler,
		},
		{
			MethodName: "CreateQueryStream",
			Handler:    _HStreamApi_CreateQueryStream_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _HStreamApi_CreateSubscription_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _HStreamApi_ListSubscriptions_Handler,
		},
		{
			MethodName: "CheckSubscriptionExist",
			Handler:    _HStreamApi_CheckSubscriptionExist_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _HStreamApi_DeleteSubscription_Handler,
		},
		{
			MethodName: "LookupSubscription",
			Handler:    _HStreamApi_LookupSubscription_Handler,
		},
		{
			MethodName: "LookupSubscriptionWithOrderingKey",
			Handler:    _HStreamApi_LookupSubscriptionWithOrderingKey_Handler,
		},
		{
			MethodName: "DescribeCluster",
			Handler:    _HStreamApi_DescribeCluster_Handler,
		},
		{
			MethodName: "PerStreamTimeSeriesStats",
			Handler:    _HStreamApi_PerStreamTimeSeriesStats_Handler,
		},
		{
			MethodName: "PerStreamTimeSeriesStatsAll",
			Handler:    _HStreamApi_PerStreamTimeSeriesStatsAll_Handler,
		},
		{
			MethodName: "SendAdminCommand",
			Handler:    _HStreamApi_SendAdminCommand_Handler,
		},
		{
			MethodName: "ExecuteQuery",
			Handler:    _HStreamApi_ExecuteQuery_Handler,
		},
		{
			MethodName: "CreateQuery",
			Handler:    _HStreamApi_CreateQuery_Handler,
		},
		{
			MethodName: "ListQueries",
			Handler:    _HStreamApi_ListQueries_Handler,
		},
		{
			MethodName: "GetQuery",
			Handler:    _HStreamApi_GetQuery_Handler,
		},
		{
			MethodName: "TerminateQueries",
			Handler:    _HStreamApi_TerminateQueries_Handler,
		},
		{
			MethodName: "DeleteQuery",
			Handler:    _HStreamApi_DeleteQuery_Handler,
		},
		{
			MethodName: "RestartQuery",
			Handler:    _HStreamApi_RestartQuery_Handler,
		},
		{
			MethodName: "CreateSinkConnector",
			Handler:    _HStreamApi_CreateSinkConnector_Handler,
		},
		{
			MethodName: "ListConnectors",
			Handler:    _HStreamApi_ListConnectors_Handler,
		},
		{
			MethodName: "GetConnector",
			Handler:    _HStreamApi_GetConnector_Handler,
		},
		{
			MethodName: "DeleteConnector",
			Handler:    _HStreamApi_DeleteConnector_Handler,
		},
		{
			MethodName: "RestartConnector",
			Handler:    _HStreamApi_RestartConnector_Handler,
		},
		{
			MethodName: "TerminateConnector",
			Handler:    _HStreamApi_TerminateConnector_Handler,
		},
		{
			MethodName: "CreateView",
			Handler:    _HStreamApi_CreateView_Handler,
		},
		{
			MethodName: "ListViews",
			Handler:    _HStreamApi_ListViews_Handler,
		},
		{
			MethodName: "GetView",
			Handler:    _HStreamApi_GetView_Handler,
		},
		{
			MethodName: "DeleteView",
			Handler:    _HStreamApi_DeleteView_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _HStreamApi_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _HStreamApi_GetNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchSubscription",
			Handler:       _HStreamApi_WatchSubscription_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamingFetch",
			Handler:       _HStreamApi_StreamingFetch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecutePushQuery",
			Handler:       _HStreamApi_ExecutePushQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "HStreamApi.proto",
}
