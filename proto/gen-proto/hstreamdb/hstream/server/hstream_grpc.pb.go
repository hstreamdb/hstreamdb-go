// ---------------------------------------------------------------------------
// HStreamDB public APIs
// ---------------------------------------------------------------------------

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.15.8
// source: hstream.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HStreamApi_Echo_FullMethodName                          = "/hstream.server.HStreamApi/Echo"
	HStreamApi_CreateStream_FullMethodName                  = "/hstream.server.HStreamApi/CreateStream"
	HStreamApi_DeleteStream_FullMethodName                  = "/hstream.server.HStreamApi/DeleteStream"
	HStreamApi_TrimStream_FullMethodName                    = "/hstream.server.HStreamApi/TrimStream"
	HStreamApi_TrimShards_FullMethodName                    = "/hstream.server.HStreamApi/TrimShards"
	HStreamApi_GetStream_FullMethodName                     = "/hstream.server.HStreamApi/GetStream"
	HStreamApi_ListStreams_FullMethodName                   = "/hstream.server.HStreamApi/ListStreams"
	HStreamApi_ListStreamsWithPrefix_FullMethodName         = "/hstream.server.HStreamApi/ListStreamsWithPrefix"
	HStreamApi_LookupShard_FullMethodName                   = "/hstream.server.HStreamApi/LookupShard"
	HStreamApi_Append_FullMethodName                        = "/hstream.server.HStreamApi/Append"
	HStreamApi_GetTailRecordId_FullMethodName               = "/hstream.server.HStreamApi/GetTailRecordId"
	HStreamApi_ListShards_FullMethodName                    = "/hstream.server.HStreamApi/ListShards"
	HStreamApi_TrimShard_FullMethodName                     = "/hstream.server.HStreamApi/TrimShard"
	HStreamApi_CreateShardReader_FullMethodName             = "/hstream.server.HStreamApi/CreateShardReader"
	HStreamApi_LookupShardReader_FullMethodName             = "/hstream.server.HStreamApi/LookupShardReader"
	HStreamApi_ReadShard_FullMethodName                     = "/hstream.server.HStreamApi/ReadShard"
	HStreamApi_ReadShardStream_FullMethodName               = "/hstream.server.HStreamApi/ReadShardStream"
	HStreamApi_ListShardReaders_FullMethodName              = "/hstream.server.HStreamApi/ListShardReaders"
	HStreamApi_DeleteShardReader_FullMethodName             = "/hstream.server.HStreamApi/DeleteShardReader"
	HStreamApi_ReadStream_FullMethodName                    = "/hstream.server.HStreamApi/ReadStream"
	HStreamApi_ReadSingleShardStream_FullMethodName         = "/hstream.server.HStreamApi/ReadSingleShardStream"
	HStreamApi_ReadStreamByKey_FullMethodName               = "/hstream.server.HStreamApi/ReadStreamByKey"
	HStreamApi_CreateSubscription_FullMethodName            = "/hstream.server.HStreamApi/CreateSubscription"
	HStreamApi_GetSubscription_FullMethodName               = "/hstream.server.HStreamApi/GetSubscription"
	HStreamApi_ListSubscriptions_FullMethodName             = "/hstream.server.HStreamApi/ListSubscriptions"
	HStreamApi_ListSubscriptionsWithPrefix_FullMethodName   = "/hstream.server.HStreamApi/ListSubscriptionsWithPrefix"
	HStreamApi_ListConsumers_FullMethodName                 = "/hstream.server.HStreamApi/ListConsumers"
	HStreamApi_CheckSubscriptionExist_FullMethodName        = "/hstream.server.HStreamApi/CheckSubscriptionExist"
	HStreamApi_DeleteSubscription_FullMethodName            = "/hstream.server.HStreamApi/DeleteSubscription"
	HStreamApi_LookupSubscription_FullMethodName            = "/hstream.server.HStreamApi/LookupSubscription"
	HStreamApi_StreamingFetch_FullMethodName                = "/hstream.server.HStreamApi/StreamingFetch"
	HStreamApi_DescribeCluster_FullMethodName               = "/hstream.server.HStreamApi/DescribeCluster"
	HStreamApi_LookupResource_FullMethodName                = "/hstream.server.HStreamApi/LookupResource"
	HStreamApi_LookupKey_FullMethodName                     = "/hstream.server.HStreamApi/LookupKey"
	HStreamApi_SendAdminCommand_FullMethodName              = "/hstream.server.HStreamApi/SendAdminCommand"
	HStreamApi_PerStreamTimeSeriesStats_FullMethodName      = "/hstream.server.HStreamApi/PerStreamTimeSeriesStats"
	HStreamApi_PerStreamTimeSeriesStatsAll_FullMethodName   = "/hstream.server.HStreamApi/PerStreamTimeSeriesStatsAll"
	HStreamApi_GetStats_FullMethodName                      = "/hstream.server.HStreamApi/GetStats"
	HStreamApi_ExecuteQuery_FullMethodName                  = "/hstream.server.HStreamApi/ExecuteQuery"
	HStreamApi_CreateQuery_FullMethodName                   = "/hstream.server.HStreamApi/CreateQuery"
	HStreamApi_CreateQueryWithNamespace_FullMethodName      = "/hstream.server.HStreamApi/CreateQueryWithNamespace"
	HStreamApi_ListQueries_FullMethodName                   = "/hstream.server.HStreamApi/ListQueries"
	HStreamApi_GetQuery_FullMethodName                      = "/hstream.server.HStreamApi/GetQuery"
	HStreamApi_TerminateQuery_FullMethodName                = "/hstream.server.HStreamApi/TerminateQuery"
	HStreamApi_DeleteQuery_FullMethodName                   = "/hstream.server.HStreamApi/DeleteQuery"
	HStreamApi_ResumeQuery_FullMethodName                   = "/hstream.server.HStreamApi/ResumeQuery"
	HStreamApi_PauseQuery_FullMethodName                    = "/hstream.server.HStreamApi/PauseQuery"
	HStreamApi_ParseSql_FullMethodName                      = "/hstream.server.HStreamApi/ParseSql"
	HStreamApi_RegisterSchema_FullMethodName                = "/hstream.server.HStreamApi/RegisterSchema"
	HStreamApi_GetSchema_FullMethodName                     = "/hstream.server.HStreamApi/GetSchema"
	HStreamApi_UnregisterSchema_FullMethodName              = "/hstream.server.HStreamApi/UnregisterSchema"
	HStreamApi_CreateConnector_FullMethodName               = "/hstream.server.HStreamApi/CreateConnector"
	HStreamApi_ListConnectors_FullMethodName                = "/hstream.server.HStreamApi/ListConnectors"
	HStreamApi_GetConnector_FullMethodName                  = "/hstream.server.HStreamApi/GetConnector"
	HStreamApi_GetConnectorSpec_FullMethodName              = "/hstream.server.HStreamApi/GetConnectorSpec"
	HStreamApi_GetConnectorLogs_FullMethodName              = "/hstream.server.HStreamApi/GetConnectorLogs"
	HStreamApi_DeleteConnector_FullMethodName               = "/hstream.server.HStreamApi/DeleteConnector"
	HStreamApi_PauseConnector_FullMethodName                = "/hstream.server.HStreamApi/PauseConnector"
	HStreamApi_ResumeConnector_FullMethodName               = "/hstream.server.HStreamApi/ResumeConnector"
	HStreamApi_AlterConnectorConfig_FullMethodName          = "/hstream.server.HStreamApi/AlterConnectorConfig"
	HStreamApi_ListViews_FullMethodName                     = "/hstream.server.HStreamApi/ListViews"
	HStreamApi_GetView_FullMethodName                       = "/hstream.server.HStreamApi/GetView"
	HStreamApi_DeleteView_FullMethodName                    = "/hstream.server.HStreamApi/DeleteView"
	HStreamApi_ExecuteViewQuery_FullMethodName              = "/hstream.server.HStreamApi/ExecuteViewQuery"
	HStreamApi_ExecuteViewQueryWithNamespace_FullMethodName = "/hstream.server.HStreamApi/ExecuteViewQueryWithNamespace"
)

// HStreamApiClient is the client API for HStreamApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HStreamApiClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Stream APIs
	CreateStream(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*Stream, error)
	DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TrimStream(ctx context.Context, in *TrimStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Find the oldest recordId in each shard, and trim all the records before
	// that recordId(exclude)."
	TrimShards(ctx context.Context, in *TrimShardsRequest, opts ...grpc.CallOption) (*TrimShardsResponse, error)
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error)
	ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error)
	ListStreamsWithPrefix(ctx context.Context, in *ListStreamsWithPrefixRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error)
	LookupShard(ctx context.Context, in *LookupShardRequest, opts ...grpc.CallOption) (*LookupShardResponse, error)
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	GetTailRecordId(ctx context.Context, in *GetTailRecordIdRequest, opts ...grpc.CallOption) (*GetTailRecordIdResponse, error)
	// Shard APIs
	ListShards(ctx context.Context, in *ListShardsRequest, opts ...grpc.CallOption) (*ListShardsResponse, error)
	TrimShard(ctx context.Context, in *TrimShardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateShardReader(ctx context.Context, in *CreateShardReaderRequest, opts ...grpc.CallOption) (*CreateShardReaderResponse, error)
	LookupShardReader(ctx context.Context, in *LookupShardReaderRequest, opts ...grpc.CallOption) (*LookupShardReaderResponse, error)
	ReadShard(ctx context.Context, in *ReadShardRequest, opts ...grpc.CallOption) (*ReadShardResponse, error)
	ReadShardStream(ctx context.Context, in *ReadShardStreamRequest, opts ...grpc.CallOption) (HStreamApi_ReadShardStreamClient, error)
	ListShardReaders(ctx context.Context, in *ListShardReadersRequest, opts ...grpc.CallOption) (*ListShardReadersResponse, error)
	DeleteShardReader(ctx context.Context, in *DeleteShardReaderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadStream(ctx context.Context, in *ReadStreamRequest, opts ...grpc.CallOption) (HStreamApi_ReadStreamClient, error)
	ReadSingleShardStream(ctx context.Context, in *ReadSingleShardStreamRequest, opts ...grpc.CallOption) (HStreamApi_ReadSingleShardStreamClient, error)
	ReadStreamByKey(ctx context.Context, opts ...grpc.CallOption) (HStreamApi_ReadStreamByKeyClient, error)
	// Subscribe APIs
	CreateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error)
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	ListSubscriptionsWithPrefix(ctx context.Context, in *ListSubscriptionsWithPrefixRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	ListConsumers(ctx context.Context, in *ListConsumersRequest, opts ...grpc.CallOption) (*ListConsumersResponse, error)
	CheckSubscriptionExist(ctx context.Context, in *CheckSubscriptionExistRequest, opts ...grpc.CallOption) (*CheckSubscriptionExistResponse, error)
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LookupSubscription(ctx context.Context, in *LookupSubscriptionRequest, opts ...grpc.CallOption) (*LookupSubscriptionResponse, error)
	StreamingFetch(ctx context.Context, opts ...grpc.CallOption) (HStreamApi_StreamingFetchClient, error)
	// Cluster APIs
	DescribeCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DescribeClusterResponse, error)
	LookupResource(ctx context.Context, in *LookupResourceRequest, opts ...grpc.CallOption) (*ServerNode, error)
	LookupKey(ctx context.Context, in *LookupKeyRequest, opts ...grpc.CallOption) (*ServerNode, error)
	// Admin Command
	SendAdminCommand(ctx context.Context, in *AdminCommandRequest, opts ...grpc.CallOption) (*AdminCommandResponse, error)
	// Stats
	PerStreamTimeSeriesStats(ctx context.Context, in *PerStreamTimeSeriesStatsRequest, opts ...grpc.CallOption) (*PerStreamTimeSeriesStatsResponse, error)
	PerStreamTimeSeriesStatsAll(ctx context.Context, in *PerStreamTimeSeriesStatsAllRequest, opts ...grpc.CallOption) (*PerStreamTimeSeriesStatsAllResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	// for execute any sql stmt except push query,
	// e.g., insert, create, show/list, select(without emit changes) ...
	ExecuteQuery(ctx context.Context, in *CommandQuery, opts ...grpc.CallOption) (*CommandQueryResponse, error)
	// query related apis
	CreateQuery(ctx context.Context, in *CreateQueryRequest, opts ...grpc.CallOption) (*Query, error)
	CreateQueryWithNamespace(ctx context.Context, in *CreateQueryWithNamespaceRequest, opts ...grpc.CallOption) (*Query, error)
	ListQueries(ctx context.Context, in *ListQueriesRequest, opts ...grpc.CallOption) (*ListQueriesResponse, error)
	GetQuery(ctx context.Context, in *GetQueryRequest, opts ...grpc.CallOption) (*Query, error)
	TerminateQuery(ctx context.Context, in *TerminateQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteQuery(ctx context.Context, in *DeleteQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResumeQuery(ctx context.Context, in *ResumeQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PauseQuery(ctx context.Context, in *PauseQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// parse query sql, return structuralized information
	ParseSql(ctx context.Context, in *ParseSqlRequest, opts ...grpc.CallOption) (*ParseSqlResponse, error)
	RegisterSchema(ctx context.Context, in *Schema, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*Schema, error)
	UnregisterSchema(ctx context.Context, in *UnregisterSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// connector related apis
	CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*Connector, error)
	ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error)
	GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*Connector, error)
	GetConnectorSpec(ctx context.Context, in *GetConnectorSpecRequest, opts ...grpc.CallOption) (*GetConnectorSpecResponse, error)
	GetConnectorLogs(ctx context.Context, in *GetConnectorLogsRequest, opts ...grpc.CallOption) (*GetConnectorLogsResponse, error)
	DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PauseConnector(ctx context.Context, in *PauseConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResumeConnector(ctx context.Context, in *ResumeConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AlterConnectorConfig(ctx context.Context, in *AlterConnectorConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// view related apis
	ListViews(ctx context.Context, in *ListViewsRequest, opts ...grpc.CallOption) (*ListViewsResponse, error)
	GetView(ctx context.Context, in *GetViewRequest, opts ...grpc.CallOption) (*View, error)
	DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExecuteViewQuery(ctx context.Context, in *ExecuteViewQueryRequest, opts ...grpc.CallOption) (*ExecuteViewQueryResponse, error)
	ExecuteViewQueryWithNamespace(ctx context.Context, in *ExecuteViewQueryWithNamespaceRequest, opts ...grpc.CallOption) (*ExecuteViewQueryResponse, error)
}

type hStreamApiClient struct {
	cc grpc.ClientConnInterface
}

func NewHStreamApiClient(cc grpc.ClientConnInterface) HStreamApiClient {
	return &hStreamApiClient{cc}
}

func (c *hStreamApiClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, HStreamApi_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateStream(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*Stream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stream)
	err := c.cc.Invoke(ctx, HStreamApi_CreateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_DeleteStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) TrimStream(ctx context.Context, in *TrimStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_TrimStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) TrimShards(ctx context.Context, in *TrimShardsRequest, opts ...grpc.CallOption) (*TrimShardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrimShardsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_TrimShards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamResponse)
	err := c.cc.Invoke(ctx, HStreamApi_GetStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ListStreams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListStreamsWithPrefix(ctx context.Context, in *ListStreamsWithPrefixRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ListStreamsWithPrefix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) LookupShard(ctx context.Context, in *LookupShardRequest, opts ...grpc.CallOption) (*LookupShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupShardResponse)
	err := c.cc.Invoke(ctx, HStreamApi_LookupShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, HStreamApi_Append_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetTailRecordId(ctx context.Context, in *GetTailRecordIdRequest, opts ...grpc.CallOption) (*GetTailRecordIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTailRecordIdResponse)
	err := c.cc.Invoke(ctx, HStreamApi_GetTailRecordId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListShards(ctx context.Context, in *ListShardsRequest, opts ...grpc.CallOption) (*ListShardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShardsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ListShards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) TrimShard(ctx context.Context, in *TrimShardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_TrimShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateShardReader(ctx context.Context, in *CreateShardReaderRequest, opts ...grpc.CallOption) (*CreateShardReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShardReaderResponse)
	err := c.cc.Invoke(ctx, HStreamApi_CreateShardReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) LookupShardReader(ctx context.Context, in *LookupShardReaderRequest, opts ...grpc.CallOption) (*LookupShardReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupShardReaderResponse)
	err := c.cc.Invoke(ctx, HStreamApi_LookupShardReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ReadShard(ctx context.Context, in *ReadShardRequest, opts ...grpc.CallOption) (*ReadShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadShardResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ReadShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ReadShardStream(ctx context.Context, in *ReadShardStreamRequest, opts ...grpc.CallOption) (HStreamApi_ReadShardStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HStreamApi_ServiceDesc.Streams[0], HStreamApi_ReadShardStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &hStreamApiReadShardStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HStreamApi_ReadShardStreamClient interface {
	Recv() (*ReadShardStreamResponse, error)
	grpc.ClientStream
}

type hStreamApiReadShardStreamClient struct {
	grpc.ClientStream
}

func (x *hStreamApiReadShardStreamClient) Recv() (*ReadShardStreamResponse, error) {
	m := new(ReadShardStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hStreamApiClient) ListShardReaders(ctx context.Context, in *ListShardReadersRequest, opts ...grpc.CallOption) (*ListShardReadersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShardReadersResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ListShardReaders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteShardReader(ctx context.Context, in *DeleteShardReaderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_DeleteShardReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ReadStream(ctx context.Context, in *ReadStreamRequest, opts ...grpc.CallOption) (HStreamApi_ReadStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HStreamApi_ServiceDesc.Streams[1], HStreamApi_ReadStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &hStreamApiReadStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HStreamApi_ReadStreamClient interface {
	Recv() (*ReadStreamResponse, error)
	grpc.ClientStream
}

type hStreamApiReadStreamClient struct {
	grpc.ClientStream
}

func (x *hStreamApiReadStreamClient) Recv() (*ReadStreamResponse, error) {
	m := new(ReadStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hStreamApiClient) ReadSingleShardStream(ctx context.Context, in *ReadSingleShardStreamRequest, opts ...grpc.CallOption) (HStreamApi_ReadSingleShardStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HStreamApi_ServiceDesc.Streams[2], HStreamApi_ReadSingleShardStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &hStreamApiReadSingleShardStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HStreamApi_ReadSingleShardStreamClient interface {
	Recv() (*ReadSingleShardStreamResponse, error)
	grpc.ClientStream
}

type hStreamApiReadSingleShardStreamClient struct {
	grpc.ClientStream
}

func (x *hStreamApiReadSingleShardStreamClient) Recv() (*ReadSingleShardStreamResponse, error) {
	m := new(ReadSingleShardStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hStreamApiClient) ReadStreamByKey(ctx context.Context, opts ...grpc.CallOption) (HStreamApi_ReadStreamByKeyClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HStreamApi_ServiceDesc.Streams[3], HStreamApi_ReadStreamByKey_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &hStreamApiReadStreamByKeyClient{ClientStream: stream}
	return x, nil
}

type HStreamApi_ReadStreamByKeyClient interface {
	Send(*ReadStreamByKeyRequest) error
	Recv() (*ReadStreamByKeyResponse, error)
	grpc.ClientStream
}

type hStreamApiReadStreamByKeyClient struct {
	grpc.ClientStream
}

func (x *hStreamApiReadStreamByKeyClient) Send(m *ReadStreamByKeyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hStreamApiReadStreamByKeyClient) Recv() (*ReadStreamByKeyResponse, error) {
	m := new(ReadStreamByKeyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hStreamApiClient) CreateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Subscription)
	err := c.cc.Invoke(ctx, HStreamApi_CreateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, HStreamApi_GetSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ListSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListSubscriptionsWithPrefix(ctx context.Context, in *ListSubscriptionsWithPrefixRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ListSubscriptionsWithPrefix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListConsumers(ctx context.Context, in *ListConsumersRequest, opts ...grpc.CallOption) (*ListConsumersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConsumersResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ListConsumers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CheckSubscriptionExist(ctx context.Context, in *CheckSubscriptionExistRequest, opts ...grpc.CallOption) (*CheckSubscriptionExistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckSubscriptionExistResponse)
	err := c.cc.Invoke(ctx, HStreamApi_CheckSubscriptionExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_DeleteSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) LookupSubscription(ctx context.Context, in *LookupSubscriptionRequest, opts ...grpc.CallOption) (*LookupSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupSubscriptionResponse)
	err := c.cc.Invoke(ctx, HStreamApi_LookupSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) StreamingFetch(ctx context.Context, opts ...grpc.CallOption) (HStreamApi_StreamingFetchClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HStreamApi_ServiceDesc.Streams[4], HStreamApi_StreamingFetch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &hStreamApiStreamingFetchClient{ClientStream: stream}
	return x, nil
}

type HStreamApi_StreamingFetchClient interface {
	Send(*StreamingFetchRequest) error
	Recv() (*StreamingFetchResponse, error)
	grpc.ClientStream
}

type hStreamApiStreamingFetchClient struct {
	grpc.ClientStream
}

func (x *hStreamApiStreamingFetchClient) Send(m *StreamingFetchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hStreamApiStreamingFetchClient) Recv() (*StreamingFetchResponse, error) {
	m := new(StreamingFetchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hStreamApiClient) DescribeCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DescribeClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeClusterResponse)
	err := c.cc.Invoke(ctx, HStreamApi_DescribeCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) LookupResource(ctx context.Context, in *LookupResourceRequest, opts ...grpc.CallOption) (*ServerNode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerNode)
	err := c.cc.Invoke(ctx, HStreamApi_LookupResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) LookupKey(ctx context.Context, in *LookupKeyRequest, opts ...grpc.CallOption) (*ServerNode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerNode)
	err := c.cc.Invoke(ctx, HStreamApi_LookupKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) SendAdminCommand(ctx context.Context, in *AdminCommandRequest, opts ...grpc.CallOption) (*AdminCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminCommandResponse)
	err := c.cc.Invoke(ctx, HStreamApi_SendAdminCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) PerStreamTimeSeriesStats(ctx context.Context, in *PerStreamTimeSeriesStatsRequest, opts ...grpc.CallOption) (*PerStreamTimeSeriesStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerStreamTimeSeriesStatsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_PerStreamTimeSeriesStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) PerStreamTimeSeriesStatsAll(ctx context.Context, in *PerStreamTimeSeriesStatsAllRequest, opts ...grpc.CallOption) (*PerStreamTimeSeriesStatsAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerStreamTimeSeriesStatsAllResponse)
	err := c.cc.Invoke(ctx, HStreamApi_PerStreamTimeSeriesStatsAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ExecuteQuery(ctx context.Context, in *CommandQuery, opts ...grpc.CallOption) (*CommandQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandQueryResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ExecuteQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateQuery(ctx context.Context, in *CreateQueryRequest, opts ...grpc.CallOption) (*Query, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Query)
	err := c.cc.Invoke(ctx, HStreamApi_CreateQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateQueryWithNamespace(ctx context.Context, in *CreateQueryWithNamespaceRequest, opts ...grpc.CallOption) (*Query, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Query)
	err := c.cc.Invoke(ctx, HStreamApi_CreateQueryWithNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListQueries(ctx context.Context, in *ListQueriesRequest, opts ...grpc.CallOption) (*ListQueriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueriesResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ListQueries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetQuery(ctx context.Context, in *GetQueryRequest, opts ...grpc.CallOption) (*Query, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Query)
	err := c.cc.Invoke(ctx, HStreamApi_GetQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) TerminateQuery(ctx context.Context, in *TerminateQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_TerminateQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteQuery(ctx context.Context, in *DeleteQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_DeleteQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ResumeQuery(ctx context.Context, in *ResumeQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_ResumeQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) PauseQuery(ctx context.Context, in *PauseQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_PauseQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ParseSql(ctx context.Context, in *ParseSqlRequest, opts ...grpc.CallOption) (*ParseSqlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseSqlResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ParseSql_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) RegisterSchema(ctx context.Context, in *Schema, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_RegisterSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*Schema, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Schema)
	err := c.cc.Invoke(ctx, HStreamApi_GetSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) UnregisterSchema(ctx context.Context, in *UnregisterSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_UnregisterSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*Connector, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Connector)
	err := c.cc.Invoke(ctx, HStreamApi_CreateConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectorsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ListConnectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*Connector, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Connector)
	err := c.cc.Invoke(ctx, HStreamApi_GetConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetConnectorSpec(ctx context.Context, in *GetConnectorSpecRequest, opts ...grpc.CallOption) (*GetConnectorSpecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnectorSpecResponse)
	err := c.cc.Invoke(ctx, HStreamApi_GetConnectorSpec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetConnectorLogs(ctx context.Context, in *GetConnectorLogsRequest, opts ...grpc.CallOption) (*GetConnectorLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnectorLogsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_GetConnectorLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_DeleteConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) PauseConnector(ctx context.Context, in *PauseConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_PauseConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ResumeConnector(ctx context.Context, in *ResumeConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_ResumeConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) AlterConnectorConfig(ctx context.Context, in *AlterConnectorConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_AlterConnectorConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ListViews(ctx context.Context, in *ListViewsRequest, opts ...grpc.CallOption) (*ListViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListViewsResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ListViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) GetView(ctx context.Context, in *GetViewRequest, opts ...grpc.CallOption) (*View, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(View)
	err := c.cc.Invoke(ctx, HStreamApi_GetView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HStreamApi_DeleteView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ExecuteViewQuery(ctx context.Context, in *ExecuteViewQueryRequest, opts ...grpc.CallOption) (*ExecuteViewQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteViewQueryResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ExecuteViewQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamApiClient) ExecuteViewQueryWithNamespace(ctx context.Context, in *ExecuteViewQueryWithNamespaceRequest, opts ...grpc.CallOption) (*ExecuteViewQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteViewQueryResponse)
	err := c.cc.Invoke(ctx, HStreamApi_ExecuteViewQueryWithNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HStreamApiServer is the server API for HStreamApi service.
// All implementations must embed UnimplementedHStreamApiServer
// for forward compatibility
type HStreamApiServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Stream APIs
	CreateStream(context.Context, *Stream) (*Stream, error)
	DeleteStream(context.Context, *DeleteStreamRequest) (*emptypb.Empty, error)
	TrimStream(context.Context, *TrimStreamRequest) (*emptypb.Empty, error)
	// Find the oldest recordId in each shard, and trim all the records before
	// that recordId(exclude)."
	TrimShards(context.Context, *TrimShardsRequest) (*TrimShardsResponse, error)
	GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error)
	ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error)
	ListStreamsWithPrefix(context.Context, *ListStreamsWithPrefixRequest) (*ListStreamsResponse, error)
	LookupShard(context.Context, *LookupShardRequest) (*LookupShardResponse, error)
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	GetTailRecordId(context.Context, *GetTailRecordIdRequest) (*GetTailRecordIdResponse, error)
	// Shard APIs
	ListShards(context.Context, *ListShardsRequest) (*ListShardsResponse, error)
	TrimShard(context.Context, *TrimShardRequest) (*emptypb.Empty, error)
	CreateShardReader(context.Context, *CreateShardReaderRequest) (*CreateShardReaderResponse, error)
	LookupShardReader(context.Context, *LookupShardReaderRequest) (*LookupShardReaderResponse, error)
	ReadShard(context.Context, *ReadShardRequest) (*ReadShardResponse, error)
	ReadShardStream(*ReadShardStreamRequest, HStreamApi_ReadShardStreamServer) error
	ListShardReaders(context.Context, *ListShardReadersRequest) (*ListShardReadersResponse, error)
	DeleteShardReader(context.Context, *DeleteShardReaderRequest) (*emptypb.Empty, error)
	ReadStream(*ReadStreamRequest, HStreamApi_ReadStreamServer) error
	ReadSingleShardStream(*ReadSingleShardStreamRequest, HStreamApi_ReadSingleShardStreamServer) error
	ReadStreamByKey(HStreamApi_ReadStreamByKeyServer) error
	// Subscribe APIs
	CreateSubscription(context.Context, *Subscription) (*Subscription, error)
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	ListSubscriptionsWithPrefix(context.Context, *ListSubscriptionsWithPrefixRequest) (*ListSubscriptionsResponse, error)
	ListConsumers(context.Context, *ListConsumersRequest) (*ListConsumersResponse, error)
	CheckSubscriptionExist(context.Context, *CheckSubscriptionExistRequest) (*CheckSubscriptionExistResponse, error)
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*emptypb.Empty, error)
	LookupSubscription(context.Context, *LookupSubscriptionRequest) (*LookupSubscriptionResponse, error)
	StreamingFetch(HStreamApi_StreamingFetchServer) error
	// Cluster APIs
	DescribeCluster(context.Context, *emptypb.Empty) (*DescribeClusterResponse, error)
	LookupResource(context.Context, *LookupResourceRequest) (*ServerNode, error)
	LookupKey(context.Context, *LookupKeyRequest) (*ServerNode, error)
	// Admin Command
	SendAdminCommand(context.Context, *AdminCommandRequest) (*AdminCommandResponse, error)
	// Stats
	PerStreamTimeSeriesStats(context.Context, *PerStreamTimeSeriesStatsRequest) (*PerStreamTimeSeriesStatsResponse, error)
	PerStreamTimeSeriesStatsAll(context.Context, *PerStreamTimeSeriesStatsAllRequest) (*PerStreamTimeSeriesStatsAllResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	// for execute any sql stmt except push query,
	// e.g., insert, create, show/list, select(without emit changes) ...
	ExecuteQuery(context.Context, *CommandQuery) (*CommandQueryResponse, error)
	// query related apis
	CreateQuery(context.Context, *CreateQueryRequest) (*Query, error)
	CreateQueryWithNamespace(context.Context, *CreateQueryWithNamespaceRequest) (*Query, error)
	ListQueries(context.Context, *ListQueriesRequest) (*ListQueriesResponse, error)
	GetQuery(context.Context, *GetQueryRequest) (*Query, error)
	TerminateQuery(context.Context, *TerminateQueryRequest) (*emptypb.Empty, error)
	DeleteQuery(context.Context, *DeleteQueryRequest) (*emptypb.Empty, error)
	ResumeQuery(context.Context, *ResumeQueryRequest) (*emptypb.Empty, error)
	PauseQuery(context.Context, *PauseQueryRequest) (*emptypb.Empty, error)
	// parse query sql, return structuralized information
	ParseSql(context.Context, *ParseSqlRequest) (*ParseSqlResponse, error)
	RegisterSchema(context.Context, *Schema) (*emptypb.Empty, error)
	GetSchema(context.Context, *GetSchemaRequest) (*Schema, error)
	UnregisterSchema(context.Context, *UnregisterSchemaRequest) (*emptypb.Empty, error)
	// connector related apis
	CreateConnector(context.Context, *CreateConnectorRequest) (*Connector, error)
	ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error)
	GetConnector(context.Context, *GetConnectorRequest) (*Connector, error)
	GetConnectorSpec(context.Context, *GetConnectorSpecRequest) (*GetConnectorSpecResponse, error)
	GetConnectorLogs(context.Context, *GetConnectorLogsRequest) (*GetConnectorLogsResponse, error)
	DeleteConnector(context.Context, *DeleteConnectorRequest) (*emptypb.Empty, error)
	PauseConnector(context.Context, *PauseConnectorRequest) (*emptypb.Empty, error)
	ResumeConnector(context.Context, *ResumeConnectorRequest) (*emptypb.Empty, error)
	AlterConnectorConfig(context.Context, *AlterConnectorConfigRequest) (*emptypb.Empty, error)
	// view related apis
	ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error)
	GetView(context.Context, *GetViewRequest) (*View, error)
	DeleteView(context.Context, *DeleteViewRequest) (*emptypb.Empty, error)
	ExecuteViewQuery(context.Context, *ExecuteViewQueryRequest) (*ExecuteViewQueryResponse, error)
	ExecuteViewQueryWithNamespace(context.Context, *ExecuteViewQueryWithNamespaceRequest) (*ExecuteViewQueryResponse, error)
	mustEmbedUnimplementedHStreamApiServer()
}

// UnimplementedHStreamApiServer must be embedded to have forward compatible implementations.
type UnimplementedHStreamApiServer struct {
}

func (UnimplementedHStreamApiServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedHStreamApiServer) CreateStream(context.Context, *Stream) (*Stream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedHStreamApiServer) DeleteStream(context.Context, *DeleteStreamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (UnimplementedHStreamApiServer) TrimStream(context.Context, *TrimStreamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrimStream not implemented")
}
func (UnimplementedHStreamApiServer) TrimShards(context.Context, *TrimShardsRequest) (*TrimShardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrimShards not implemented")
}
func (UnimplementedHStreamApiServer) GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedHStreamApiServer) ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedHStreamApiServer) ListStreamsWithPrefix(context.Context, *ListStreamsWithPrefixRequest) (*ListStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamsWithPrefix not implemented")
}
func (UnimplementedHStreamApiServer) LookupShard(context.Context, *LookupShardRequest) (*LookupShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupShard not implemented")
}
func (UnimplementedHStreamApiServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedHStreamApiServer) GetTailRecordId(context.Context, *GetTailRecordIdRequest) (*GetTailRecordIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTailRecordId not implemented")
}
func (UnimplementedHStreamApiServer) ListShards(context.Context, *ListShardsRequest) (*ListShardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShards not implemented")
}
func (UnimplementedHStreamApiServer) TrimShard(context.Context, *TrimShardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrimShard not implemented")
}
func (UnimplementedHStreamApiServer) CreateShardReader(context.Context, *CreateShardReaderRequest) (*CreateShardReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShardReader not implemented")
}
func (UnimplementedHStreamApiServer) LookupShardReader(context.Context, *LookupShardReaderRequest) (*LookupShardReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupShardReader not implemented")
}
func (UnimplementedHStreamApiServer) ReadShard(context.Context, *ReadShardRequest) (*ReadShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadShard not implemented")
}
func (UnimplementedHStreamApiServer) ReadShardStream(*ReadShardStreamRequest, HStreamApi_ReadShardStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadShardStream not implemented")
}
func (UnimplementedHStreamApiServer) ListShardReaders(context.Context, *ListShardReadersRequest) (*ListShardReadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShardReaders not implemented")
}
func (UnimplementedHStreamApiServer) DeleteShardReader(context.Context, *DeleteShardReaderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShardReader not implemented")
}
func (UnimplementedHStreamApiServer) ReadStream(*ReadStreamRequest, HStreamApi_ReadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadStream not implemented")
}
func (UnimplementedHStreamApiServer) ReadSingleShardStream(*ReadSingleShardStreamRequest, HStreamApi_ReadSingleShardStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadSingleShardStream not implemented")
}
func (UnimplementedHStreamApiServer) ReadStreamByKey(HStreamApi_ReadStreamByKeyServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadStreamByKey not implemented")
}
func (UnimplementedHStreamApiServer) CreateSubscription(context.Context, *Subscription) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedHStreamApiServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedHStreamApiServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedHStreamApiServer) ListSubscriptionsWithPrefix(context.Context, *ListSubscriptionsWithPrefixRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionsWithPrefix not implemented")
}
func (UnimplementedHStreamApiServer) ListConsumers(context.Context, *ListConsumersRequest) (*ListConsumersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumers not implemented")
}
func (UnimplementedHStreamApiServer) CheckSubscriptionExist(context.Context, *CheckSubscriptionExistRequest) (*CheckSubscriptionExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSubscriptionExist not implemented")
}
func (UnimplementedHStreamApiServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedHStreamApiServer) LookupSubscription(context.Context, *LookupSubscriptionRequest) (*LookupSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupSubscription not implemented")
}
func (UnimplementedHStreamApiServer) StreamingFetch(HStreamApi_StreamingFetchServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingFetch not implemented")
}
func (UnimplementedHStreamApiServer) DescribeCluster(context.Context, *emptypb.Empty) (*DescribeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCluster not implemented")
}
func (UnimplementedHStreamApiServer) LookupResource(context.Context, *LookupResourceRequest) (*ServerNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupResource not implemented")
}
func (UnimplementedHStreamApiServer) LookupKey(context.Context, *LookupKeyRequest) (*ServerNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupKey not implemented")
}
func (UnimplementedHStreamApiServer) SendAdminCommand(context.Context, *AdminCommandRequest) (*AdminCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAdminCommand not implemented")
}
func (UnimplementedHStreamApiServer) PerStreamTimeSeriesStats(context.Context, *PerStreamTimeSeriesStatsRequest) (*PerStreamTimeSeriesStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerStreamTimeSeriesStats not implemented")
}
func (UnimplementedHStreamApiServer) PerStreamTimeSeriesStatsAll(context.Context, *PerStreamTimeSeriesStatsAllRequest) (*PerStreamTimeSeriesStatsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerStreamTimeSeriesStatsAll not implemented")
}
func (UnimplementedHStreamApiServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedHStreamApiServer) ExecuteQuery(context.Context, *CommandQuery) (*CommandQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedHStreamApiServer) CreateQuery(context.Context, *CreateQueryRequest) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuery not implemented")
}
func (UnimplementedHStreamApiServer) CreateQueryWithNamespace(context.Context, *CreateQueryWithNamespaceRequest) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueryWithNamespace not implemented")
}
func (UnimplementedHStreamApiServer) ListQueries(context.Context, *ListQueriesRequest) (*ListQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueries not implemented")
}
func (UnimplementedHStreamApiServer) GetQuery(context.Context, *GetQueryRequest) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuery not implemented")
}
func (UnimplementedHStreamApiServer) TerminateQuery(context.Context, *TerminateQueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateQuery not implemented")
}
func (UnimplementedHStreamApiServer) DeleteQuery(context.Context, *DeleteQueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuery not implemented")
}
func (UnimplementedHStreamApiServer) ResumeQuery(context.Context, *ResumeQueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeQuery not implemented")
}
func (UnimplementedHStreamApiServer) PauseQuery(context.Context, *PauseQueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseQuery not implemented")
}
func (UnimplementedHStreamApiServer) ParseSql(context.Context, *ParseSqlRequest) (*ParseSqlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseSql not implemented")
}
func (UnimplementedHStreamApiServer) RegisterSchema(context.Context, *Schema) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSchema not implemented")
}
func (UnimplementedHStreamApiServer) GetSchema(context.Context, *GetSchemaRequest) (*Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedHStreamApiServer) UnregisterSchema(context.Context, *UnregisterSchemaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterSchema not implemented")
}
func (UnimplementedHStreamApiServer) CreateConnector(context.Context, *CreateConnectorRequest) (*Connector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnector not implemented")
}
func (UnimplementedHStreamApiServer) ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectors not implemented")
}
func (UnimplementedHStreamApiServer) GetConnector(context.Context, *GetConnectorRequest) (*Connector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnector not implemented")
}
func (UnimplementedHStreamApiServer) GetConnectorSpec(context.Context, *GetConnectorSpecRequest) (*GetConnectorSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorSpec not implemented")
}
func (UnimplementedHStreamApiServer) GetConnectorLogs(context.Context, *GetConnectorLogsRequest) (*GetConnectorLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorLogs not implemented")
}
func (UnimplementedHStreamApiServer) DeleteConnector(context.Context, *DeleteConnectorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnector not implemented")
}
func (UnimplementedHStreamApiServer) PauseConnector(context.Context, *PauseConnectorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseConnector not implemented")
}
func (UnimplementedHStreamApiServer) ResumeConnector(context.Context, *ResumeConnectorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeConnector not implemented")
}
func (UnimplementedHStreamApiServer) AlterConnectorConfig(context.Context, *AlterConnectorConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterConnectorConfig not implemented")
}
func (UnimplementedHStreamApiServer) ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViews not implemented")
}
func (UnimplementedHStreamApiServer) GetView(context.Context, *GetViewRequest) (*View, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetView not implemented")
}
func (UnimplementedHStreamApiServer) DeleteView(context.Context, *DeleteViewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteView not implemented")
}
func (UnimplementedHStreamApiServer) ExecuteViewQuery(context.Context, *ExecuteViewQueryRequest) (*ExecuteViewQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteViewQuery not implemented")
}
func (UnimplementedHStreamApiServer) ExecuteViewQueryWithNamespace(context.Context, *ExecuteViewQueryWithNamespaceRequest) (*ExecuteViewQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteViewQueryWithNamespace not implemented")
}
func (UnimplementedHStreamApiServer) mustEmbedUnimplementedHStreamApiServer() {}

// UnsafeHStreamApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HStreamApiServer will
// result in compilation errors.
type UnsafeHStreamApiServer interface {
	mustEmbedUnimplementedHStreamApiServer()
}

func RegisterHStreamApiServer(s grpc.ServiceRegistrar, srv HStreamApiServer) {
	s.RegisterService(&HStreamApi_ServiceDesc, srv)
}

func _HStreamApi_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_CreateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateStream(ctx, req.(*Stream))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_DeleteStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteStream(ctx, req.(*DeleteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_TrimStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).TrimStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_TrimStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).TrimStream(ctx, req.(*TrimStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_TrimShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).TrimShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_TrimShards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).TrimShards(ctx, req.(*TrimShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_GetStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ListStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListStreams(ctx, req.(*ListStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListStreamsWithPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamsWithPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListStreamsWithPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ListStreamsWithPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListStreamsWithPrefix(ctx, req.(*ListStreamsWithPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_LookupShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).LookupShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_LookupShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).LookupShard(ctx, req.(*LookupShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_Append_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetTailRecordId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTailRecordIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetTailRecordId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_GetTailRecordId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetTailRecordId(ctx, req.(*GetTailRecordIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ListShards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListShards(ctx, req.(*ListShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_TrimShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).TrimShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_TrimShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).TrimShard(ctx, req.(*TrimShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateShardReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateShardReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_CreateShardReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateShardReader(ctx, req.(*CreateShardReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_LookupShardReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupShardReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).LookupShardReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_LookupShardReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).LookupShardReader(ctx, req.(*LookupShardReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ReadShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ReadShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ReadShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ReadShard(ctx, req.(*ReadShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ReadShardStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadShardStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HStreamApiServer).ReadShardStream(m, &hStreamApiReadShardStreamServer{ServerStream: stream})
}

type HStreamApi_ReadShardStreamServer interface {
	Send(*ReadShardStreamResponse) error
	grpc.ServerStream
}

type hStreamApiReadShardStreamServer struct {
	grpc.ServerStream
}

func (x *hStreamApiReadShardStreamServer) Send(m *ReadShardStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HStreamApi_ListShardReaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShardReadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListShardReaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ListShardReaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListShardReaders(ctx, req.(*ListShardReadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteShardReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShardReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteShardReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_DeleteShardReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteShardReader(ctx, req.(*DeleteShardReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ReadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HStreamApiServer).ReadStream(m, &hStreamApiReadStreamServer{ServerStream: stream})
}

type HStreamApi_ReadStreamServer interface {
	Send(*ReadStreamResponse) error
	grpc.ServerStream
}

type hStreamApiReadStreamServer struct {
	grpc.ServerStream
}

func (x *hStreamApiReadStreamServer) Send(m *ReadStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HStreamApi_ReadSingleShardStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadSingleShardStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HStreamApiServer).ReadSingleShardStream(m, &hStreamApiReadSingleShardStreamServer{ServerStream: stream})
}

type HStreamApi_ReadSingleShardStreamServer interface {
	Send(*ReadSingleShardStreamResponse) error
	grpc.ServerStream
}

type hStreamApiReadSingleShardStreamServer struct {
	grpc.ServerStream
}

func (x *hStreamApiReadSingleShardStreamServer) Send(m *ReadSingleShardStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HStreamApi_ReadStreamByKey_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HStreamApiServer).ReadStreamByKey(&hStreamApiReadStreamByKeyServer{ServerStream: stream})
}

type HStreamApi_ReadStreamByKeyServer interface {
	Send(*ReadStreamByKeyResponse) error
	Recv() (*ReadStreamByKeyRequest, error)
	grpc.ServerStream
}

type hStreamApiReadStreamByKeyServer struct {
	grpc.ServerStream
}

func (x *hStreamApiReadStreamByKeyServer) Send(m *ReadStreamByKeyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hStreamApiReadStreamByKeyServer) Recv() (*ReadStreamByKeyRequest, error) {
	m := new(ReadStreamByKeyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HStreamApi_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateSubscription(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_GetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ListSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListSubscriptionsWithPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsWithPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListSubscriptionsWithPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ListSubscriptionsWithPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListSubscriptionsWithPrefix(ctx, req.(*ListSubscriptionsWithPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListConsumers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListConsumers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ListConsumers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListConsumers(ctx, req.(*ListConsumersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CheckSubscriptionExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSubscriptionExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CheckSubscriptionExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_CheckSubscriptionExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CheckSubscriptionExist(ctx, req.(*CheckSubscriptionExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_DeleteSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_LookupSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).LookupSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_LookupSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).LookupSubscription(ctx, req.(*LookupSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_StreamingFetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HStreamApiServer).StreamingFetch(&hStreamApiStreamingFetchServer{ServerStream: stream})
}

type HStreamApi_StreamingFetchServer interface {
	Send(*StreamingFetchResponse) error
	Recv() (*StreamingFetchRequest, error)
	grpc.ServerStream
}

type hStreamApiStreamingFetchServer struct {
	grpc.ServerStream
}

func (x *hStreamApiStreamingFetchServer) Send(m *StreamingFetchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hStreamApiStreamingFetchServer) Recv() (*StreamingFetchRequest, error) {
	m := new(StreamingFetchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HStreamApi_DescribeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DescribeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_DescribeCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DescribeCluster(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_LookupResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).LookupResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_LookupResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).LookupResource(ctx, req.(*LookupResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_LookupKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).LookupKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_LookupKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).LookupKey(ctx, req.(*LookupKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_SendAdminCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).SendAdminCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_SendAdminCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).SendAdminCommand(ctx, req.(*AdminCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_PerStreamTimeSeriesStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerStreamTimeSeriesStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).PerStreamTimeSeriesStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_PerStreamTimeSeriesStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).PerStreamTimeSeriesStats(ctx, req.(*PerStreamTimeSeriesStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_PerStreamTimeSeriesStatsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerStreamTimeSeriesStatsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).PerStreamTimeSeriesStatsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_PerStreamTimeSeriesStatsAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).PerStreamTimeSeriesStatsAll(ctx, req.(*PerStreamTimeSeriesStatsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ExecuteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ExecuteQuery(ctx, req.(*CommandQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_CreateQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateQuery(ctx, req.(*CreateQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateQueryWithNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryWithNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateQueryWithNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_CreateQueryWithNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateQueryWithNamespace(ctx, req.(*CreateQueryWithNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ListQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListQueries(ctx, req.(*ListQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_GetQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetQuery(ctx, req.(*GetQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_TerminateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).TerminateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_TerminateQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).TerminateQuery(ctx, req.(*TerminateQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_DeleteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteQuery(ctx, req.(*DeleteQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ResumeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ResumeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ResumeQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ResumeQuery(ctx, req.(*ResumeQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_PauseQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).PauseQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_PauseQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).PauseQuery(ctx, req.(*PauseQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ParseSql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseSqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ParseSql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ParseSql_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ParseSql(ctx, req.(*ParseSqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_RegisterSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Schema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).RegisterSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_RegisterSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).RegisterSchema(ctx, req.(*Schema))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_UnregisterSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).UnregisterSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_UnregisterSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).UnregisterSchema(ctx, req.(*UnregisterSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_CreateConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).CreateConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_CreateConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).CreateConnector(ctx, req.(*CreateConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ListConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListConnectors(ctx, req.(*ListConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_GetConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetConnector(ctx, req.(*GetConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetConnectorSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetConnectorSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_GetConnectorSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetConnectorSpec(ctx, req.(*GetConnectorSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetConnectorLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetConnectorLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_GetConnectorLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetConnectorLogs(ctx, req.(*GetConnectorLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_DeleteConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteConnector(ctx, req.(*DeleteConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_PauseConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).PauseConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_PauseConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).PauseConnector(ctx, req.(*PauseConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ResumeConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ResumeConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ResumeConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ResumeConnector(ctx, req.(*ResumeConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_AlterConnectorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterConnectorConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).AlterConnectorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_AlterConnectorConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).AlterConnectorConfig(ctx, req.(*AlterConnectorConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ListViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ListViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ListViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ListViews(ctx, req.(*ListViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_GetView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).GetView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_GetView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).GetView(ctx, req.(*GetViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_DeleteView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).DeleteView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_DeleteView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).DeleteView(ctx, req.(*DeleteViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ExecuteViewQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteViewQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ExecuteViewQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ExecuteViewQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ExecuteViewQuery(ctx, req.(*ExecuteViewQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamApi_ExecuteViewQueryWithNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteViewQueryWithNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamApiServer).ExecuteViewQueryWithNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HStreamApi_ExecuteViewQueryWithNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamApiServer).ExecuteViewQueryWithNamespace(ctx, req.(*ExecuteViewQueryWithNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HStreamApi_ServiceDesc is the grpc.ServiceDesc for HStreamApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HStreamApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hstream.server.HStreamApi",
	HandlerType: (*HStreamApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _HStreamApi_Echo_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _HStreamApi_CreateStream_Handler,
		},
		{
			MethodName: "DeleteStream",
			Handler:    _HStreamApi_DeleteStream_Handler,
		},
		{
			MethodName: "TrimStream",
			Handler:    _HStreamApi_TrimStream_Handler,
		},
		{
			MethodName: "TrimShards",
			Handler:    _HStreamApi_TrimShards_Handler,
		},
		{
			MethodName: "GetStream",
			Handler:    _HStreamApi_GetStream_Handler,
		},
		{
			MethodName: "ListStreams",
			Handler:    _HStreamApi_ListStreams_Handler,
		},
		{
			MethodName: "ListStreamsWithPrefix",
			Handler:    _HStreamApi_ListStreamsWithPrefix_Handler,
		},
		{
			MethodName: "LookupShard",
			Handler:    _HStreamApi_LookupShard_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _HStreamApi_Append_Handler,
		},
		{
			MethodName: "GetTailRecordId",
			Handler:    _HStreamApi_GetTailRecordId_Handler,
		},
		{
			MethodName: "ListShards",
			Handler:    _HStreamApi_ListShards_Handler,
		},
		{
			MethodName: "TrimShard",
			Handler:    _HStreamApi_TrimShard_Handler,
		},
		{
			MethodName: "CreateShardReader",
			Handler:    _HStreamApi_CreateShardReader_Handler,
		},
		{
			MethodName: "LookupShardReader",
			Handler:    _HStreamApi_LookupShardReader_Handler,
		},
		{
			MethodName: "ReadShard",
			Handler:    _HStreamApi_ReadShard_Handler,
		},
		{
			MethodName: "ListShardReaders",
			Handler:    _HStreamApi_ListShardReaders_Handler,
		},
		{
			MethodName: "DeleteShardReader",
			Handler:    _HStreamApi_DeleteShardReader_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _HStreamApi_CreateSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _HStreamApi_GetSubscription_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _HStreamApi_ListSubscriptions_Handler,
		},
		{
			MethodName: "ListSubscriptionsWithPrefix",
			Handler:    _HStreamApi_ListSubscriptionsWithPrefix_Handler,
		},
		{
			MethodName: "ListConsumers",
			Handler:    _HStreamApi_ListConsumers_Handler,
		},
		{
			MethodName: "CheckSubscriptionExist",
			Handler:    _HStreamApi_CheckSubscriptionExist_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _HStreamApi_DeleteSubscription_Handler,
		},
		{
			MethodName: "LookupSubscription",
			Handler:    _HStreamApi_LookupSubscription_Handler,
		},
		{
			MethodName: "DescribeCluster",
			Handler:    _HStreamApi_DescribeCluster_Handler,
		},
		{
			MethodName: "LookupResource",
			Handler:    _HStreamApi_LookupResource_Handler,
		},
		{
			MethodName: "LookupKey",
			Handler:    _HStreamApi_LookupKey_Handler,
		},
		{
			MethodName: "SendAdminCommand",
			Handler:    _HStreamApi_SendAdminCommand_Handler,
		},
		{
			MethodName: "PerStreamTimeSeriesStats",
			Handler:    _HStreamApi_PerStreamTimeSeriesStats_Handler,
		},
		{
			MethodName: "PerStreamTimeSeriesStatsAll",
			Handler:    _HStreamApi_PerStreamTimeSeriesStatsAll_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _HStreamApi_GetStats_Handler,
		},
		{
			MethodName: "ExecuteQuery",
			Handler:    _HStreamApi_ExecuteQuery_Handler,
		},
		{
			MethodName: "CreateQuery",
			Handler:    _HStreamApi_CreateQuery_Handler,
		},
		{
			MethodName: "CreateQueryWithNamespace",
			Handler:    _HStreamApi_CreateQueryWithNamespace_Handler,
		},
		{
			MethodName: "ListQueries",
			Handler:    _HStreamApi_ListQueries_Handler,
		},
		{
			MethodName: "GetQuery",
			Handler:    _HStreamApi_GetQuery_Handler,
		},
		{
			MethodName: "TerminateQuery",
			Handler:    _HStreamApi_TerminateQuery_Handler,
		},
		{
			MethodName: "DeleteQuery",
			Handler:    _HStreamApi_DeleteQuery_Handler,
		},
		{
			MethodName: "ResumeQuery",
			Handler:    _HStreamApi_ResumeQuery_Handler,
		},
		{
			MethodName: "PauseQuery",
			Handler:    _HStreamApi_PauseQuery_Handler,
		},
		{
			MethodName: "ParseSql",
			Handler:    _HStreamApi_ParseSql_Handler,
		},
		{
			MethodName: "RegisterSchema",
			Handler:    _HStreamApi_RegisterSchema_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _HStreamApi_GetSchema_Handler,
		},
		{
			MethodName: "UnregisterSchema",
			Handler:    _HStreamApi_UnregisterSchema_Handler,
		},
		{
			MethodName: "CreateConnector",
			Handler:    _HStreamApi_CreateConnector_Handler,
		},
		{
			MethodName: "ListConnectors",
			Handler:    _HStreamApi_ListConnectors_Handler,
		},
		{
			MethodName: "GetConnector",
			Handler:    _HStreamApi_GetConnector_Handler,
		},
		{
			MethodName: "GetConnectorSpec",
			Handler:    _HStreamApi_GetConnectorSpec_Handler,
		},
		{
			MethodName: "GetConnectorLogs",
			Handler:    _HStreamApi_GetConnectorLogs_Handler,
		},
		{
			MethodName: "DeleteConnector",
			Handler:    _HStreamApi_DeleteConnector_Handler,
		},
		{
			MethodName: "PauseConnector",
			Handler:    _HStreamApi_PauseConnector_Handler,
		},
		{
			MethodName: "ResumeConnector",
			Handler:    _HStreamApi_ResumeConnector_Handler,
		},
		{
			MethodName: "AlterConnectorConfig",
			Handler:    _HStreamApi_AlterConnectorConfig_Handler,
		},
		{
			MethodName: "ListViews",
			Handler:    _HStreamApi_ListViews_Handler,
		},
		{
			MethodName: "GetView",
			Handler:    _HStreamApi_GetView_Handler,
		},
		{
			MethodName: "DeleteView",
			Handler:    _HStreamApi_DeleteView_Handler,
		},
		{
			MethodName: "ExecuteViewQuery",
			Handler:    _HStreamApi_ExecuteViewQuery_Handler,
		},
		{
			MethodName: "ExecuteViewQueryWithNamespace",
			Handler:    _HStreamApi_ExecuteViewQueryWithNamespace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadShardStream",
			Handler:       _HStreamApi_ReadShardStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadStream",
			Handler:       _HStreamApi_ReadStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadSingleShardStream",
			Handler:       _HStreamApi_ReadSingleShardStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadStreamByKey",
			Handler:       _HStreamApi_ReadStreamByKey_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamingFetch",
			Handler:       _HStreamApi_StreamingFetch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hstream.proto",
}
