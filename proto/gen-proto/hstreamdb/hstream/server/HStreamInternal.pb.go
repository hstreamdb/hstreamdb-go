// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: HStreamInternal.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_HStreamInternal_proto protoreflect.FileDescriptor

var file_HStreamInternal_proto_rawDesc = []byte{
	0x0a, 0x15, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x48, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xcd, 0x04, 0x0a, 0x0f, 0x48, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x6a, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x28, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x68, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2a, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x29, 0x2e, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x1a, 0x5a, 0x18, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x62, 0x2f, 0x68, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_HStreamInternal_proto_goTypes = []interface{}{
	(*CreateQueryStreamRequest)(nil),   // 0: hstream.server.CreateQueryStreamRequest
	(*RestartQueryRequest)(nil),        // 1: hstream.server.RestartQueryRequest
	(*TerminateQueriesRequest)(nil),    // 2: hstream.server.TerminateQueriesRequest
	(*CreateSinkConnectorRequest)(nil), // 3: hstream.server.CreateSinkConnectorRequest
	(*TerminateConnectorRequest)(nil),  // 4: hstream.server.TerminateConnectorRequest
	(*CreateQueryStreamResponse)(nil),  // 5: hstream.server.CreateQueryStreamResponse
	(*emptypb.Empty)(nil),              // 6: google.protobuf.Empty
	(*TerminateQueriesResponse)(nil),   // 7: hstream.server.TerminateQueriesResponse
	(*Connector)(nil),                  // 8: hstream.server.Connector
}
var file_HStreamInternal_proto_depIdxs = []int32{
	0, // 0: hstream.server.HStreamInternal.CreateQueryStream:input_type -> hstream.server.CreateQueryStreamRequest
	1, // 1: hstream.server.HStreamInternal.RestartQuery:input_type -> hstream.server.RestartQueryRequest
	2, // 2: hstream.server.HStreamInternal.TerminateQueries:input_type -> hstream.server.TerminateQueriesRequest
	3, // 3: hstream.server.HStreamInternal.CreateSinkConnector:input_type -> hstream.server.CreateSinkConnectorRequest
	3, // 4: hstream.server.HStreamInternal.RestartConnector:input_type -> hstream.server.CreateSinkConnectorRequest
	4, // 5: hstream.server.HStreamInternal.TerminateConnector:input_type -> hstream.server.TerminateConnectorRequest
	5, // 6: hstream.server.HStreamInternal.CreateQueryStream:output_type -> hstream.server.CreateQueryStreamResponse
	6, // 7: hstream.server.HStreamInternal.RestartQuery:output_type -> google.protobuf.Empty
	7, // 8: hstream.server.HStreamInternal.TerminateQueries:output_type -> hstream.server.TerminateQueriesResponse
	8, // 9: hstream.server.HStreamInternal.CreateSinkConnector:output_type -> hstream.server.Connector
	8, // 10: hstream.server.HStreamInternal.RestartConnector:output_type -> hstream.server.Connector
	6, // 11: hstream.server.HStreamInternal.TerminateConnector:output_type -> google.protobuf.Empty
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_HStreamInternal_proto_init() }
func file_HStreamInternal_proto_init() {
	if File_HStreamInternal_proto != nil {
		return
	}
	file_HStreamApi_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_HStreamInternal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_HStreamInternal_proto_goTypes,
		DependencyIndexes: file_HStreamInternal_proto_depIdxs,
	}.Build()
	File_HStreamInternal_proto = out.File
	file_HStreamInternal_proto_rawDesc = nil
	file_HStreamInternal_proto_goTypes = nil
	file_HStreamInternal_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HStreamInternalClient is the client API for HStreamInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HStreamInternalClient interface {
	CreateQueryStream(ctx context.Context, in *CreateQueryStreamRequest, opts ...grpc.CallOption) (*CreateQueryStreamResponse, error)
	RestartQuery(ctx context.Context, in *RestartQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TerminateQueries(ctx context.Context, in *TerminateQueriesRequest, opts ...grpc.CallOption) (*TerminateQueriesResponse, error)
	CreateSinkConnector(ctx context.Context, in *CreateSinkConnectorRequest, opts ...grpc.CallOption) (*Connector, error)
	RestartConnector(ctx context.Context, in *CreateSinkConnectorRequest, opts ...grpc.CallOption) (*Connector, error)
	TerminateConnector(ctx context.Context, in *TerminateConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hStreamInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewHStreamInternalClient(cc grpc.ClientConnInterface) HStreamInternalClient {
	return &hStreamInternalClient{cc}
}

func (c *hStreamInternalClient) CreateQueryStream(ctx context.Context, in *CreateQueryStreamRequest, opts ...grpc.CallOption) (*CreateQueryStreamResponse, error) {
	out := new(CreateQueryStreamResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamInternal/CreateQueryStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamInternalClient) RestartQuery(ctx context.Context, in *RestartQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamInternal/RestartQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamInternalClient) TerminateQueries(ctx context.Context, in *TerminateQueriesRequest, opts ...grpc.CallOption) (*TerminateQueriesResponse, error) {
	out := new(TerminateQueriesResponse)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamInternal/TerminateQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamInternalClient) CreateSinkConnector(ctx context.Context, in *CreateSinkConnectorRequest, opts ...grpc.CallOption) (*Connector, error) {
	out := new(Connector)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamInternal/CreateSinkConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamInternalClient) RestartConnector(ctx context.Context, in *CreateSinkConnectorRequest, opts ...grpc.CallOption) (*Connector, error) {
	out := new(Connector)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamInternal/RestartConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hStreamInternalClient) TerminateConnector(ctx context.Context, in *TerminateConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hstream.server.HStreamInternal/TerminateConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HStreamInternalServer is the server API for HStreamInternal service.
type HStreamInternalServer interface {
	CreateQueryStream(context.Context, *CreateQueryStreamRequest) (*CreateQueryStreamResponse, error)
	RestartQuery(context.Context, *RestartQueryRequest) (*emptypb.Empty, error)
	TerminateQueries(context.Context, *TerminateQueriesRequest) (*TerminateQueriesResponse, error)
	CreateSinkConnector(context.Context, *CreateSinkConnectorRequest) (*Connector, error)
	RestartConnector(context.Context, *CreateSinkConnectorRequest) (*Connector, error)
	TerminateConnector(context.Context, *TerminateConnectorRequest) (*emptypb.Empty, error)
}

// UnimplementedHStreamInternalServer can be embedded to have forward compatible implementations.
type UnimplementedHStreamInternalServer struct {
}

func (*UnimplementedHStreamInternalServer) CreateQueryStream(context.Context, *CreateQueryStreamRequest) (*CreateQueryStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueryStream not implemented")
}
func (*UnimplementedHStreamInternalServer) RestartQuery(context.Context, *RestartQueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartQuery not implemented")
}
func (*UnimplementedHStreamInternalServer) TerminateQueries(context.Context, *TerminateQueriesRequest) (*TerminateQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateQueries not implemented")
}
func (*UnimplementedHStreamInternalServer) CreateSinkConnector(context.Context, *CreateSinkConnectorRequest) (*Connector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSinkConnector not implemented")
}
func (*UnimplementedHStreamInternalServer) RestartConnector(context.Context, *CreateSinkConnectorRequest) (*Connector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartConnector not implemented")
}
func (*UnimplementedHStreamInternalServer) TerminateConnector(context.Context, *TerminateConnectorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateConnector not implemented")
}

func RegisterHStreamInternalServer(s *grpc.Server, srv HStreamInternalServer) {
	s.RegisterService(&_HStreamInternal_serviceDesc, srv)
}

func _HStreamInternal_CreateQueryStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamInternalServer).CreateQueryStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamInternal/CreateQueryStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamInternalServer).CreateQueryStream(ctx, req.(*CreateQueryStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamInternal_RestartQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamInternalServer).RestartQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamInternal/RestartQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamInternalServer).RestartQuery(ctx, req.(*RestartQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamInternal_TerminateQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamInternalServer).TerminateQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamInternal/TerminateQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamInternalServer).TerminateQueries(ctx, req.(*TerminateQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamInternal_CreateSinkConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSinkConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamInternalServer).CreateSinkConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamInternal/CreateSinkConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamInternalServer).CreateSinkConnector(ctx, req.(*CreateSinkConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamInternal_RestartConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSinkConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamInternalServer).RestartConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamInternal/RestartConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamInternalServer).RestartConnector(ctx, req.(*CreateSinkConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HStreamInternal_TerminateConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HStreamInternalServer).TerminateConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hstream.server.HStreamInternal/TerminateConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HStreamInternalServer).TerminateConnector(ctx, req.(*TerminateConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HStreamInternal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hstream.server.HStreamInternal",
	HandlerType: (*HStreamInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueryStream",
			Handler:    _HStreamInternal_CreateQueryStream_Handler,
		},
		{
			MethodName: "RestartQuery",
			Handler:    _HStreamInternal_RestartQuery_Handler,
		},
		{
			MethodName: "TerminateQueries",
			Handler:    _HStreamInternal_TerminateQueries_Handler,
		},
		{
			MethodName: "CreateSinkConnector",
			Handler:    _HStreamInternal_CreateSinkConnector_Handler,
		},
		{
			MethodName: "RestartConnector",
			Handler:    _HStreamInternal_RestartConnector_Handler,
		},
		{
			MethodName: "TerminateConnector",
			Handler:    _HStreamInternal_TerminateConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "HStreamInternal.proto",
}
